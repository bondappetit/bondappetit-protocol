{
  "address": "0xF3189FCC3eEeF0b707a8550a94dE2eCfAE89D5A7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "changeExpenditure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deficit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "deficitTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "expenditures",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8087c718004fe2cb2434b80251f76f66b8f953be2220044c36725ad531cf20c9",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xF3189FCC3eEeF0b707a8550a94dE2eCfAE89D5A7",
    "transactionIndex": 26,
    "gasUsed": "2019415",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000001000000000000000000000000000000040000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000800000000000000000000000000000000000000000000000020000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000008",
    "blockHash": "0x6bb41f08b1a83e7cb5f9fd6a0e87c512fcbceaa57c99bd1e1e54b1cba5231620",
    "transactionHash": "0x8087c718004fe2cb2434b80251f76f66b8f953be2220044c36725ad531cf20c9",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 7789747,
        "transactionHash": "0x8087c718004fe2cb2434b80251f76f66b8f953be2220044c36725ad531cf20c9",
        "address": "0xF3189FCC3eEeF0b707a8550a94dE2eCfAE89D5A7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x6bb41f08b1a83e7cb5f9fd6a0e87c512fcbceaa57c99bd1e1e54b1cba5231620"
      }
    ],
    "blockNumber": 7789747,
    "cumulativeGasUsed": "9229067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0cf4cc9fdb3e6a35148e94b9ef4590e5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"ExpenditureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"changeExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deficitTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expenditures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeExpenditure(address,uint256,uint256)\":{\"params\":{\"min\":\"Minimal balance for payment.\",\"recipient\":\"Recipient address.\",\"target\":\"Target balance.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"deficit()\":{\"returns\":{\"_0\":\"Summary balance deficit of all recipients.\"}},\"deficitTo(address)\":{\"params\":{\"recipient\":\"Target recipient.\"},\"returns\":{\"_0\":\"Balance deficit of recipient.\"}},\"getRecipients()\":{\"returns\":{\"_0\":\"Recipients addresses.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferETH(address,uint256)\":{\"params\":{\"amount\":\"Transfer amount.\",\"recipient\":\"Recipient.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"balances\":{\"details\":\"Withdrawal balance of recipients.\"},\"recipients\":{\"details\":\"Recipients addresses list.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ExpenditureChanged(address,uint256,uint256)\":{\"notice\":\"An event emitted when expenditure item changed.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"Payed(address,uint256)\":{\"notice\":\"An event emitted when expenditure item payed.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get withdrawal balance of recipient.\"},\"changeExpenditure(address,uint256,uint256)\":{\"notice\":\"Change expenditure item.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"deficit()\":{\"notice\":\"Return summary balance deficit of all recipients.\"},\"deficitTo(address)\":{\"notice\":\"Return balance deficit of recipient.\"},\"expenditures(address)\":{\"notice\":\"Expenditure item to address.\"},\"getRecipients()\":{\"notice\":\"Return all recipients addresses.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"pay()\":{\"notice\":\"Pay ETH to all recipients with balance deficit.\"},\"totalSupply()\":{\"notice\":\"Total withdrawal balance.\"},\"transferETH(address,uint256)\":{\"notice\":\"Transfer ETH to recipient.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"withdraw()\":{\"notice\":\"Withdraw ETH to recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Budget.sol\":\"Budget\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Budget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Budget is OwnablePausable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Expenditure item.\\n    struct Expenditure {\\n        address recipient;\\n        uint256 min;\\n        uint256 target;\\n    }\\n\\n    /// @notice Expenditure item to address.\\n    mapping(address => Expenditure) public expenditures;\\n\\n    /// @dev Recipients addresses list.\\n    EnumerableSet.AddressSet internal recipients;\\n\\n    /// @dev Withdrawal balance of recipients.\\n    mapping(address => uint256) internal balances;\\n\\n    /// @notice Total withdrawal balance.\\n    uint256 public totalSupply;\\n\\n    /// @notice An event emitted when expenditure item changed.\\n    event ExpenditureChanged(address recipient, uint256 min, uint256 target);\\n\\n    /// @notice An event emitted when expenditure item payed.\\n    event Payed(address recipient, uint256 amount);\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Change expenditure item.\\n     * @param recipient Recipient address.\\n     * @param min Minimal balance for payment.\\n     * @param target Target balance.\\n     */\\n    function changeExpenditure(\\n        address recipient,\\n        uint256 min,\\n        uint256 target\\n    ) external onlyOwner {\\n        require(min <= target, \\\"Budget::changeExpenditure: minimal balance should be less or equal target balance\\\");\\n\\n        expenditures[recipient] = Expenditure(recipient, min, target);\\n        if (target > 0) {\\n            recipients.add(recipient);\\n        } else {\\n            recipients.remove(recipient);\\n        }\\n        emit ExpenditureChanged(recipient, min, target);\\n    }\\n\\n    /**\\n     * @notice Get withdrawal balance of recipient.\\n     */\\n    function balanceOf(address recipient) public view returns (uint256) {\\n        return balances[recipient];\\n    }\\n\\n    /**\\n     * @notice Transfer ETH to recipient.\\n     * @param recipient Recipient.\\n     * @param amount Transfer amount.\\n     */\\n    function transferETH(address payable recipient, uint256 amount) external onlyOwner {\\n        require(address(this).balance.sub(totalSupply) >= amount, \\\"Budget::transferETH: transfer amount exceeds balance\\\");\\n\\n        recipient.transfer(amount);\\n    }\\n\\n    /**\\n     * @notice Return all recipients addresses.\\n     * @return Recipients addresses.\\n     */\\n    function getRecipients() external view returns (address[] memory) {\\n        address[] memory result = new address[](recipients.length());\\n\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            result[i] = recipients.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return balance deficit of recipient.\\n     * @param recipient Target recipient.\\n     * @return Balance deficit of recipient.\\n     */\\n    function deficitTo(address recipient) public view returns (uint256) {\\n        require(recipients.contains(recipient), \\\"Budget::deficitTo: recipient not in expenditure item\\\");\\n\\n        uint256 availableBalance = recipient.balance.add(balanceOf(recipient));\\n        if (availableBalance > expenditures[recipient].min) return 0;\\n\\n        return expenditures[recipient].target.sub(availableBalance);\\n    }\\n\\n    /**\\n     * @notice Return summary balance deficit of all recipients.\\n     * @return Summary balance deficit of all recipients.\\n     */\\n    function deficit() public view returns (uint256) {\\n        uint256 result;\\n\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            result = result.add(deficitTo(recipients.at(i)));\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Pay ETH to all recipients with balance deficit.\\n     */\\n    function pay() external {\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            uint256 budgetBalance = address(this).balance.sub(totalSupply);\\n            address recipient = recipients.at(i);\\n            uint256 amount = deficitTo(recipient);\\n            if (amount == 0 || budgetBalance < amount) continue;\\n\\n            balances[recipient] = balanceOf(recipient).add(amount);\\n            totalSupply = totalSupply.add(amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw ETH to recipient.\\n     */\\n    function withdraw() external {\\n        address payable recipient = _msgSender();\\n        uint256 amount = balanceOf(recipient);\\n        require(amount > 0, \\\"Budget::withdraw: transfer amount exceeds balance\\\");\\n\\n        balances[recipient] = 0;\\n        totalSupply = totalSupply.sub(amount);\\n        recipient.transfer(amount);\\n        emit Payed(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0a3d58a8e8a46e46c7ed3be82b727daf6c7b22de3f65f7a81d60bcd0f424c1e4\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061002161012c60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008060146101000a81548160ff0219169083151502179055506100e761013460201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061015d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6122cc806200016d6000396000f3fe60806040526004361061010d5760003560e01c8063715018a6116100955780639fd0506d116100645780639fd0506d146102f0578063d78d610b1461031b578063e21fe96114610346578063e9cf66f114610385578063f2fde38b146103c257610114565b8063715018a61461026e5780637b1a4909146102855780638456cb59146102ae5780638da5cb5b146102c557610114565b80633ccfd60b116100dc5780633ccfd60b146101ad5780633f4ba83a146101c45780635426fa8a146101db5780635c975abb1461020657806370a082311461023157610114565b80630d4320211461011957806318160ddd146101425780631b9265b81461016d5780632cd271e71461018457610114565b3661011457005b600080fd5b34801561012557600080fd5b50610140600480360381019061013b91906118ad565b6103eb565b005b34801561014e57600080fd5b5061015761060a565b604051610164919061210d565b60405180910390f35b34801561017957600080fd5b50610182610610565b005b34801561019057600080fd5b506101ab60048036038101906101a69190611848565b61070a565b005b3480156101b957600080fd5b506101c261083c565b005b3480156101d057600080fd5b506101d961097c565b005b3480156101e757600080fd5b506101f0610a61565b6040516101fd919061210d565b60405180910390f35b34801561021257600080fd5b5061021b610abd565b6040516102289190611f50565b60405180910390f35b34801561023d57600080fd5b5061025860048036038101906102539190611848565b610ad3565b604051610265919061210d565b60405180910390f35b34801561027a57600080fd5b50610283610b1c565b005b34801561029157600080fd5b506102ac60048036038101906102a79190611871565b610c6f565b005b3480156102ba57600080fd5b506102c3610da6565b005b3480156102d157600080fd5b506102da610e8b565b6040516102e79190611e98565b60405180910390f35b3480156102fc57600080fd5b50610305610eb4565b6040516103129190611e98565b60405180910390f35b34801561032757600080fd5b50610330610eda565b60405161033d9190611f2e565b60405180910390f35b34801561035257600080fd5b5061036d60048036038101906103689190611848565b610fb2565b60405161037c93929190611ef7565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190611848565b610ffc565b6040516103b9919061210d565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190611848565b611139565b005b6103f36112fb565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610477906120cd565b60405180910390fd5b808211156104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba906120ed565b60405180910390fd5b60405180606001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505060008111156105b4576105ae83600361130390919063ffffffff16565b506105ca565b6105c883600361133390919063ffffffff16565b505b7f5c315648fddc891fd463694f00b02e1b8e3a1847790fd85887fb41f7c28fb1ca8383836040516105fd93929190611ef7565b60405180910390a1505050565b60065481565b60005b61061d6003611363565b81101561070757600061063b6006544761137890919063ffffffff16565b905060006106538360036113c290919063ffffffff16565b9050600061066082610ffc565b9050600081148061067057508083105b1561067d575050506106fa565b6106988161068a84610ad3565b6113dc90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106f0816006546113dc90919063ffffffff16565b6006819055505050505b8080600101915050610613565b50565b6107126112fb565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461079f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610796906120cd565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516108319190611e98565b60405180910390a150565b60006108466112fb565b9050600061085382610ad3565b905060008111610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f9061206d565b60405180910390fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f28160065461137890919063ffffffff16565b6006819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561093e573d6000803e3d6000fd5b507f7be9078cfa949e4b9e15888282e2a07a7fae4958503c18c81db93c5d413524978282604051610970929190611ece565b60405180910390a15050565b6109846112fb565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a1857506109e26112fb565b73ffffffffffffffffffffffffffffffffffffffff16610a00610e8b565b73ffffffffffffffffffffffffffffffffffffffff16145b610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e9061200d565b60405180910390fd5b610a5f611431565b565b60008060005b610a716003611363565b811015610ab557610aa6610a97610a928360036113c290919063ffffffff16565b610ffc565b836113dc90919063ffffffff16565b91508080600101915050610a67565b508091505090565b60008060149054906101000a900460ff16905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b246112fb565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba8906120cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610c776112fb565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb906120cd565b60405180910390fd5b80610d1a6006544761137890919063ffffffff16565b1015610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d52906120ad565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610da1573d6000803e3d6000fd5b505050565b610dae6112fb565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e425750610e0c6112fb565b73ffffffffffffffffffffffffffffffffffffffff16610e2a610e8b565b73ffffffffffffffffffffffffffffffffffffffff16145b610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7890611fed565b60405180910390fd5b610e896114da565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606080610ee76003611363565b67ffffffffffffffff81118015610efd57600080fd5b50604051908082528060200260200182016040528015610f2c5781602001602082028036833780820191505090505b50905060005b610f3c6003611363565b811015610faa57610f578160036113c290919063ffffffff16565b828281518110610f6357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610f32565b508091505090565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600061101282600361158590919063ffffffff16565b611051576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110489061204d565b60405180910390fd5b600061108561105f84610ad3565b8473ffffffffffffffffffffffffffffffffffffffff16316113dc90919063ffffffff16565b9050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548111156110db576000915050611134565b61113081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461137890919063ffffffff16565b9150505b919050565b6111416112fb565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906120cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561123e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123590611fcd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600061132b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6115b5565b905092915050565b600061135b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611625565b905092915050565b60006113718260000161170d565b9050919050565b60006113ba83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061171e565b905092915050565b60006113d18360000183611779565b60001c905092915050565b600080828401905083811015611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e9061202d565b60405180910390fd5b8091505092915050565b600060149054906101000a900460ff16611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790611fad565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6114c36112fb565b6040516114d09190611eb3565b60405180910390a1565b600060149054906101000a900460ff161561152a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115219061208d565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861156e6112fb565b60405161157b9190611eb3565b60405180910390a1565b60006115ad836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6117e6565b905092915050565b60006115c183836117e6565b61161a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061161f565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114611701576000600182039050600060018660000180549050039050600086600001828154811061167057fe5b906000526020600020015490508087600001848154811061168d57fe5b90600052602060002001819055506001830187600101600083815260200190815260200160002081905550866000018054806116c557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611707565b60009150505b92915050565b600081600001805490509050919050565b6000838311158290611766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175d9190611f6b565b60405180910390fd5b5060008385039050809150509392505050565b6000818360000180549050116117c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bb90611f8d565b60405180910390fd5b8260000182815481106117d357fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008135905061181881612251565b92915050565b60008135905061182d81612268565b92915050565b6000813590506118428161227f565b92915050565b60006020828403121561185a57600080fd5b600061186884828501611809565b91505092915050565b6000806040838503121561188457600080fd5b60006118928582860161181e565b92505060206118a385828601611833565b9150509250929050565b6000806000606084860312156118c257600080fd5b60006118d086828701611809565b93505060206118e186828701611833565b92505060406118f286828701611833565b9150509250925092565b60006119088383611923565b60208301905092915050565b61191d816121d7565b82525050565b61192c8161217d565b82525050565b61193b8161217d565b82525050565b600061194c82612138565b611956818561215b565b935061196183612128565b8060005b8381101561199257815161197988826118fc565b97506119848361214e565b925050600181019050611965565b5085935050505092915050565b6119a8816121a1565b82525050565b60006119b982612143565b6119c3818561216c565b93506119d381856020860161220d565b6119dc81612240565b840191505092915050565b60006119f460228361216c565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a5a60148361216c565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611a9a60268361216c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b0060418361216c565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611b8c60458361216c565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611c18601b8361216c565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611c5860348361216c565b91507f4275646765743a3a64656669636974546f3a20726563697069656e74206e6f7460008301527f20696e20657870656e646974757265206974656d0000000000000000000000006020830152604082019050919050565b6000611cbe60318361216c565b91507f4275646765743a3a77697468647261773a207472616e7366657220616d6f756e60008301527f7420657863656564732062616c616e63650000000000000000000000000000006020830152604082019050919050565b6000611d2460108361216c565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611d6460348361216c565b91507f4275646765743a3a7472616e736665724554483a207472616e7366657220616d60008301527f6f756e7420657863656564732062616c616e63650000000000000000000000006020830152604082019050919050565b6000611dca60208361216c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611e0a60518361216c565b91507f4275646765743a3a6368616e6765457870656e6469747572653a206d696e696d60008301527f616c2062616c616e63652073686f756c64206265206c657373206f722065717560208301527f616c207461726765742062616c616e63650000000000000000000000000000006040830152606082019050919050565b611e92816121cd565b82525050565b6000602082019050611ead6000830184611932565b92915050565b6000602082019050611ec86000830184611914565b92915050565b6000604082019050611ee36000830185611914565b611ef06020830184611e89565b9392505050565b6000606082019050611f0c6000830186611932565b611f196020830185611e89565b611f266040830184611e89565b949350505050565b60006020820190508181036000830152611f488184611941565b905092915050565b6000602082019050611f65600083018461199f565b92915050565b60006020820190508181036000830152611f8581846119ae565b905092915050565b60006020820190508181036000830152611fa6816119e7565b9050919050565b60006020820190508181036000830152611fc681611a4d565b9050919050565b60006020820190508181036000830152611fe681611a8d565b9050919050565b6000602082019050818103600083015261200681611af3565b9050919050565b6000602082019050818103600083015261202681611b7f565b9050919050565b6000602082019050818103600083015261204681611c0b565b9050919050565b6000602082019050818103600083015261206681611c4b565b9050919050565b6000602082019050818103600083015261208681611cb1565b9050919050565b600060208201905081810360008301526120a681611d17565b9050919050565b600060208201905081810360008301526120c681611d57565b9050919050565b600060208201905081810360008301526120e681611dbd565b9050919050565b6000602082019050818103600083015261210681611dfd565b9050919050565b60006020820190506121226000830184611e89565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612188826121ad565b9050919050565b600061219a826121ad565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121e2826121e9565b9050919050565b60006121f4826121fb565b9050919050565b6000612206826121ad565b9050919050565b60005b8381101561222b578082015181840152602081019050612210565b8381111561223a576000848401525b50505050565b6000601f19601f8301169050919050565b61225a8161217d565b811461226557600080fd5b50565b6122718161218f565b811461227c57600080fd5b50565b612288816121cd565b811461229357600080fd5b5056fea2646970667358221220b5f48459336c42baac427cb47107dc113f3c3cf210e656b024d6dbd25a8ea34a64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeExpenditure(address,uint256,uint256)": {
        "params": {
          "min": "Minimal balance for payment.",
          "recipient": "Recipient address.",
          "target": "Target balance."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "deficit()": {
        "returns": {
          "_0": "Summary balance deficit of all recipients."
        }
      },
      "deficitTo(address)": {
        "params": {
          "recipient": "Target recipient."
        },
        "returns": {
          "_0": "Balance deficit of recipient."
        }
      },
      "getRecipients()": {
        "returns": {
          "_0": "Recipients addresses."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferETH(address,uint256)": {
        "params": {
          "amount": "Transfer amount.",
          "recipient": "Recipient."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "balances": {
        "details": "Withdrawal balance of recipients."
      },
      "recipients": {
        "details": "Recipients addresses list."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExpenditureChanged(address,uint256,uint256)": {
        "notice": "An event emitted when expenditure item changed."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "Payed(address,uint256)": {
        "notice": "An event emitted when expenditure item payed."
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get withdrawal balance of recipient."
      },
      "changeExpenditure(address,uint256,uint256)": {
        "notice": "Change expenditure item."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "deficit()": {
        "notice": "Return summary balance deficit of all recipients."
      },
      "deficitTo(address)": {
        "notice": "Return balance deficit of recipient."
      },
      "expenditures(address)": {
        "notice": "Expenditure item to address."
      },
      "getRecipients()": {
        "notice": "Return all recipients addresses."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "pay()": {
        "notice": "Pay ETH to all recipients with balance deficit."
      },
      "totalSupply()": {
        "notice": "Total withdrawal balance."
      },
      "transferETH(address,uint256)": {
        "notice": "Transfer ETH to recipient."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "withdraw()": {
        "notice": "Withdraw ETH to recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1985,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17902,
        "contract": "contracts/Budget.sol:Budget",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2123,
        "contract": "contracts/Budget.sol:Budget",
        "label": "expenditures",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Expenditure)2118_storage)"
      },
      {
        "astId": 2126,
        "contract": "contracts/Budget.sol:Budget",
        "label": "recipients",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)1763_storage"
      },
      {
        "astId": 2131,
        "contract": "contracts/Budget.sol:Budget",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2134,
        "contract": "contracts/Budget.sol:Budget",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Expenditure)2118_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Budget.Expenditure)",
        "numberOfBytes": "32",
        "value": "t_struct(Expenditure)2118_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1763_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1762,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1583_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Expenditure)2118_storage": {
        "encoding": "inplace",
        "label": "struct Budget.Expenditure",
        "members": [
          {
            "astId": 2113,
            "contract": "contracts/Budget.sol:Budget",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2115,
            "contract": "contracts/Budget.sol:Budget",
            "label": "min",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2117,
            "contract": "contracts/Budget.sol:Budget",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1583_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1578,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1582,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xFe84c58B305447fec6E5c00B24b66bEc2Fe29732",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vesting",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SharesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Split",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVesting",
          "type": "address"
        }
      ],
      "name": "VestingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "VestingWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "changeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vesting",
          "type": "address"
        }
      ],
      "name": "changeVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "split",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "vestingWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf217aecebb211209d1d81aaa4e7ea6a2a5e8d2d423985178361566d42da8122",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xFe84c58B305447fec6E5c00B24b66bEc2Fe29732",
    "transactionIndex": 18,
    "gasUsed": "2313684",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000010020000000000000000000010000000400000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9354512e4df166561a3a14a76ea841b0e53fe5ded9cd2cbb83dc014d70221d65",
    "transactionHash": "0xcf217aecebb211209d1d81aaa4e7ea6a2a5e8d2d423985178361566d42da8122",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 7789268,
        "transactionHash": "0xcf217aecebb211209d1d81aaa4e7ea6a2a5e8d2d423985178361566d42da8122",
        "address": "0xFe84c58B305447fec6E5c00B24b66bEc2Fe29732",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x9354512e4df166561a3a14a76ea841b0e53fe5ded9cd2cbb83dc014d70221d65"
      }
    ],
    "blockNumber": 7789268,
    "cumulativeGasUsed": "11209303",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x100970B4a291EDDcAAE2999CEAdac920eDB4FF21"
  ],
  "solcInputHash": "0cf4cc9fdb3e6a35148e94b9ef4590e5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SharesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVesting\",\"type\":\"address\"}],\"name\":\"VestingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"VestingWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"changeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"changeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"vestingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,address)\":{\"params\":{\"account\":\"Target account.\",\"token\":\"Target token.\"},\"returns\":{\"_0\":\"Balance of account.\"}},\"changeShares(address[],uint256[])\":{\"params\":{\"accounts\":\"Accounts list.\",\"shares\":\"Shares in split.\"}},\"changeVesting(address)\":{\"params\":{\"_vesting\":\"New vesting contract address.\"}},\"constructor\":{\"params\":{\"_vesting\":\"Vesting contract address.\"}},\"getAccounts()\":{\"returns\":{\"_0\":\"Addresses of all accounts with share.\"}},\"getMaxAccounts()\":{\"returns\":{\"_0\":\"Max accounts for split.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"shareOf(address)\":{\"params\":{\"account\":\"Target account.\"},\"returns\":{\"_0\":\"Share in split.\"}},\"split(address)\":{\"params\":{\"token\":\"Target token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vestingWithdraw(uint256)\":{\"params\":{\"periodId\":\"Target vesting period.\"}},\"withdraw(address)\":{\"params\":{\"token\":\"Target token.\"}}},\"stateVariables\":{\"_accounts\":{\"details\":\"Accounts list.\"},\"_balances\":{\"details\":\"Accounts balances.\"},\"_share\":{\"details\":\"Shares of account in split.\"}},\"version\":1},\"userdoc\":{\"events\":{\"SharesChanged()\":{\"notice\":\"An event emitted when shares changed.\"},\"Split(address)\":{\"notice\":\"An event emitted when split a balance.\"},\"VestingChanged(address)\":{\"notice\":\"An event emitted when vesting contract address changed.\"},\"VestingWithdraw(address,uint256)\":{\"notice\":\"An event emitted when vesting period withdrawal.\"},\"Withdraw(address,address,uint256)\":{\"notice\":\"An event emitted when withdrawal a token.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,address)\":{\"notice\":\"Get balance of account.\"},\"changeShares(address[],uint256[])\":{\"notice\":\"Change shares of accounts in split.\"},\"changeVesting(address)\":{\"notice\":\"Change vesting contract address.\"},\"getAccounts()\":{\"notice\":\"Get accounts with share list.\"},\"getMaxAccounts()\":{\"notice\":\"Get accounts limit for split.\"},\"shareOf(address)\":{\"notice\":\"Get share of account in split.\"},\"split(address)\":{\"notice\":\"Split token to all accounts.\"},\"totalSupply(address)\":{\"notice\":\"Distributed tokens.\"},\"vesting()\":{\"notice\":\"Vesting contract address.\"},\"vestingWithdraw(uint256)\":{\"notice\":\"Withdraw reward from vesting contract.\"},\"withdraw(address)\":{\"notice\":\"Withdraw token balance to sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestingSplitter.sol\":\"VestingSplitter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Vesting is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice The number of periods for a per recipient.\\n    function maxPeriodsPerRecipient() public pure returns (uint256) {\\n        return 5;\\n    } // 5 perios per recipient.\\n\\n    /// @notice Address of vesting token.\\n    ERC20 public token;\\n\\n    struct Period {\\n        // Identifier.\\n        uint256 id;\\n        // Reward amount.\\n        uint256 amount;\\n        // Unlockd date.\\n        uint256 date;\\n        // Description.\\n        string description;\\n        // Reward withdrawal flag.\\n        bool withdrawal;\\n    }\\n\\n    /// @dev Index last period.\\n    uint256 internal currentPeriod = 0;\\n\\n    /// @dev Participants list.\\n    EnumerableSet.AddressSet internal participants;\\n\\n    /// @dev All registered periods.\\n    mapping(address => mapping(uint256 => Period)) internal periods;\\n\\n    /// @dev Period identifiers index.\\n    mapping(address => uint256[]) internal periodsIndex;\\n\\n    /// @notice An event emitted when all votes delegate to.\\n    event DelegateVotes(address delegatee);\\n\\n    /// @notice An event emitted when locking a period.\\n    event Locked(uint256 periodId);\\n\\n    /// @notice An event emitted when revoked a period.\\n    event Revoked(uint256 periodId);\\n\\n    /// @notice An event emitted when withdrawal a period.\\n    event Withdrawal(address recipient, uint256 periodId);\\n\\n    /**\\n     * @param _token Address of vesting token contract.\\n     */\\n    constructor(address _token) public {\\n        token = ERC20(_token);\\n    }\\n\\n    /**\\n     * @notice Delegate votes to delegatee.\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address governanceToken, address delegatee) external onlyOwner {\\n        GovernanceTokenInterface(governanceToken).delegate(delegatee);\\n        emit DelegateVotes(delegatee);\\n    }\\n\\n    /**\\n     * @notice Add new period.\\n     * @param recipient Recipient of reward.\\n     * @param amount Reward amount.\\n     * @param date Date of unlockd period.\\n     * @return Added period identifier.\\n     */\\n    function lock(\\n        address recipient,\\n        uint256 amount,\\n        string memory description,\\n        uint256 date\\n    ) external onlyOwner returns (uint256) {\\n        require(periodsIndex[recipient].length <= maxPeriodsPerRecipient(), \\\"Vesting::lock: too many periods\\\");\\n\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        currentPeriod += 1;\\n        participants.add(recipient);\\n        periods[recipient][currentPeriod] = Period(currentPeriod, amount, date, description, false);\\n        periodsIndex[recipient].push(currentPeriod);\\n        emit Locked(currentPeriod);\\n\\n        return currentPeriod;\\n    }\\n\\n    /**\\n     * @notice Revoke period.\\n     * @param recipient Recipient of reward.\\n     * @param periodId Period identifier.\\n     */\\n    function revoke(address recipient, uint256 periodId) external onlyOwner {\\n        Period storage period = periods[recipient][periodId];\\n        require(!period.withdrawal, \\\"Vesting::revoke: already withdraw\\\");\\n\\n        address owner = _msgSender();\\n        uint256 amount = period.amount;\\n        period.amount = 0;\\n        token.safeTransfer(owner, amount);\\n\\n        emit Revoked(periodId);\\n    }\\n\\n    /**\\n     * @notice Return all participants addresses.\\n     * @return Participants addresses.\\n     */\\n    function getParticipants() external view returns (address[] memory) {\\n        address[] memory result = new address[](participants.length());\\n\\n        for (uint256 i = 0; i < participants.length(); i++) {\\n            result[i] = participants.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get information of period.\\n     * @param recipient Recipient address.\\n     * @return Recipient periods list.\\n     */\\n    function info(address recipient) external view returns (Period[] memory) {\\n        Period[] memory result = new Period[](periodsIndex[recipient].length);\\n\\n        for (uint256 i = 0; i < periodsIndex[recipient].length; i++) {\\n            uint256 periodId = periodsIndex[recipient][i];\\n\\n            result[i] = periods[recipient][periodId];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Withdraw reward.\\n     * @param periodId Target period identifier.\\n     */\\n    function withdraw(uint256 periodId) external whenNotPaused {\\n        address recipient = _msgSender();\\n        Period storage period = periods[recipient][periodId];\\n        require(period.amount > 0, \\\"Vesting::withdraw: period is empty\\\");\\n        require(!period.withdrawal, \\\"Vesting::withdraw: already withdraw\\\");\\n        require(block.timestamp > period.date, \\\"Vesting::withdraw: access denied\\\");\\n\\n        period.withdrawal = true;\\n        token.safeTransfer(recipient, period.amount);\\n        emit Withdrawal(recipient, periodId);\\n    }\\n}\\n\\ninterface GovernanceTokenInterface {\\n    function delegate(address delegatee) external;\\n}\\n\",\"keccak256\":\"0x3a0cc8b0cc2b4140454a03d83e3efd80b3ca3509094fd400da5d7921545c4286\",\"license\":\"MIT\"},\"contracts/VestingSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\n\\ncontract VestingSplitter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Vesting contract address.\\n     */\\n    address public vesting;\\n\\n    /**\\n     * @notice Distributed tokens.\\n     */\\n    mapping(address => uint256) public totalSupply;\\n\\n    /**\\n     * @dev Accounts balances.\\n     */\\n    mapping(address => mapping(address => uint256)) internal _balances;\\n\\n    /**\\n     * @dev Accounts list.\\n     */\\n    EnumerableSet.AddressSet internal _accounts;\\n\\n    /**\\n     * @dev Shares of account in split.\\n     */\\n    mapping(address => uint256) internal _share;\\n\\n    /// @notice An event emitted when vesting contract address changed.\\n    event VestingChanged(address newVesting);\\n\\n    /// @notice An event emitted when shares changed.\\n    event SharesChanged();\\n\\n    /// @notice An event emitted when vesting period withdrawal.\\n    event VestingWithdraw(address vesting, uint256 periodId);\\n\\n    /// @notice An event emitted when split a balance.\\n    event Split(address token);\\n\\n    /// @notice An event emitted when withdrawal a token.\\n    event Withdraw(address token, address account, uint256 reward);\\n\\n    /**\\n     * @param _vesting Vesting contract address.\\n     */\\n    constructor(address _vesting) public {\\n        vesting = _vesting;\\n    }\\n\\n    /**\\n     * @notice Get accounts limit for split.\\n     * @return Max accounts for split.\\n     */\\n    function getMaxAccounts() public pure returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @notice Get accounts with share list.\\n     * @return Addresses of all accounts with share.\\n     */\\n    function getAccounts() public view returns (address[] memory) {\\n        address[] memory result = new address[](_accounts.length());\\n\\n        for (uint256 i = 0; i < _accounts.length(); i++) {\\n            result[i] = _accounts.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get balance of account.\\n     * @param token Target token.\\n     * @param account Target account.\\n     * @return Balance of account.\\n     */\\n    function balanceOf(address token, address account) public view returns (uint256) {\\n        return _balances[token][account];\\n    }\\n\\n    /**\\n     * @notice Get share of account in split.\\n     * @param account Target account.\\n     * @return Share in split.\\n     */\\n    function shareOf(address account) public view returns (uint256) {\\n        return _share[account];\\n    }\\n\\n    /**\\n     * @notice Change vesting contract address.\\n     * @param _vesting New vesting contract address.\\n     */\\n    function changeVesting(address _vesting) external onlyOwner {\\n        vesting = _vesting;\\n        emit VestingChanged(vesting);\\n    }\\n\\n    /**\\n     * @notice Change shares of accounts in split.\\n     * @param accounts Accounts list.\\n     * @param shares Shares in split.\\n     */\\n    function changeShares(address[] memory accounts, uint256[] memory shares) external onlyOwner {\\n        require(accounts.length <= getMaxAccounts(), \\\"VestingSplitter::changeShares: too many accounts\\\");\\n        require(accounts.length == shares.length, \\\"VestingSplitter::changeShares: shares function information arity mismatch\\\");\\n\\n        // Reverse loop because the length of the set changes inside the loop condition\\n        for (uint256 i = _accounts.length(); i > 0; i--) {\\n            address account = _accounts.at(0);\\n            _share[account] = 0;\\n            _accounts.remove(account);\\n        }\\n\\n        uint256 sharesSum;\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            require(!_accounts.contains(account), \\\"VestingSplitter::changeShares: duplicate account\\\");\\n\\n            uint256 share = shares[i];\\n            require(share <= 100 && share > 0, \\\"VestingSplitter::changeShares: invalid value of share\\\");\\n\\n            _share[account] = share;\\n            sharesSum = sharesSum.add(share);\\n            _accounts.add(account);\\n        }\\n        require(sharesSum == 100, \\\"VestingSplitter::changeShares: invalid sum of shares\\\");\\n        emit SharesChanged();\\n    }\\n\\n    /**\\n     * @notice Withdraw reward from vesting contract.\\n     * @param periodId Target vesting period.\\n     */\\n    function vestingWithdraw(uint256 periodId) external {\\n        Vesting(vesting).withdraw(periodId);\\n        emit VestingWithdraw(vesting, periodId);\\n    }\\n\\n    /**\\n     * @notice Split token to all accounts.\\n     * @param token Target token.\\n     */\\n    function split(address token) external {\\n        uint256 balance = ERC20(token).balanceOf(address(this)).sub(totalSupply[token]);\\n        require(balance > 0, \\\"VestingSplitter::split: empty balance\\\");\\n\\n        for (uint256 i = 0; i < _accounts.length(); i++) {\\n            address account = _accounts.at(i);\\n            uint256 share = _share[account];\\n            uint256 reward = balance.mul(share).div(100);\\n\\n            _balances[token][account] = _balances[token][account].add(reward);\\n            totalSupply[token] = totalSupply[token].add(reward);\\n        }\\n        emit Split(token);\\n    }\\n\\n    /**\\n     * @notice Withdraw token balance to sender.\\n     * @param token Target token.\\n     */\\n    function withdraw(address token) external {\\n        uint256 reward = _balances[token][_msgSender()];\\n        _balances[token][_msgSender()] = 0;\\n        totalSupply[token] = totalSupply[token].sub(reward);\\n        ERC20(token).safeTransfer(_msgSender(), reward);\\n        emit Withdraw(token, _msgSender(), reward);\\n    }\\n}\\n\",\"keccak256\":\"0x5658ecef70ac0e9f36731f5dc1e809d3333553cc5e7039c082aafe3951c96b26\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620029f4380380620029f483398181016040528101906200003791906200014e565b6000620000496200012f60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001c8565b600033905090565b6000815190506200014881620001ae565b92915050565b6000602082840312156200016157600080fd5b6000620001718482850162000137565b91505092915050565b600062000187826200018e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001b9816200017a565b8114620001c557600080fd5b50565b61281c80620001d86000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063e003f4b011610066578063e003f4b014610211578063e4dc2aa41461022d578063f2fde38b1461025d578063f7888aec14610279576100ea565b80638da5cb5b146101bb5780639341170a146101d95780639b4352c4146101f5576100ea565b806356fa47f0116100c857806356fa47f0146101595780636dbb4bd414610175578063715018a6146101935780638a48ac031461019d576100ea565b806321e5e2c4146100ef57806344c63eec1461011f57806351cff8d91461013d575b600080fd5b61010960048036038101906101049190611c1c565b6102a9565b60405161011691906125dc565b60405180910390f35b6101276102f2565b604051610134919061237d565b60405180910390f35b61015760048036038101906101529190611c1c565b610318565b005b610173600480360381019061016e9190611c1c565b610536565b005b61017d6108e1565b60405161018a91906125dc565b60405180910390f35b61019b6108ea565b005b6101a5610a3d565b6040516101b291906123f8565b60405180910390f35b6101c3610b15565b6040516101d0919061237d565b60405180910390f35b6101f360048036038101906101ee9190611c81565b610b3e565b005b61020f600480360381019061020a9190611d16565b610ed4565b005b61022b60048036038101906102269190611c1c565b610fbf565b005b61024760048036038101906102429190611c1c565b6110f1565b60405161025491906125dc565b60405180910390f35b61027760048036038101906102729190611c1c565b611109565b005b610293600480360381019061028e9190611c45565b6112cb565b6040516102a091906125dc565b60405180910390f35b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610363611352565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103eb611352565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061047b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135a90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104f06104c9611352565b828473ffffffffffffffffffffffffffffffffffffffff166113a49092919063ffffffff16565b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8261051a611352565b8360405161052a93929190612398565b60405180910390a15050565b6000610612600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b4919061237d565b60206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190611d3f565b61135a90919063ffffffff16565b905060008111610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e906124bc565b60405180910390fd5b60005b610664600461142a565b8110156108a557600061068182600461143f90919063ffffffff16565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006106ef60646106e1848861145990919063ffffffff16565b6114c990919063ffffffff16565b905061078081600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151390919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085281600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151390919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050808060010191505061065a565b507fd54a497a40ae458299f3247b4e63c940f7924a3f8b8b9edf5f94a8120e80c117826040516108d5919061237d565b60405180910390a15050565b60006064905090565b6108f2611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461097f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109769061251c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606080610a4a600461142a565b67ffffffffffffffff81118015610a6057600080fd5b50604051908082528060200260200182016040528015610a8f5781602001602082028036833780820191505090505b50905060005b610a9f600461142a565b811015610b0d57610aba81600461143f90919063ffffffff16565b828281518110610ac657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610a95565b508091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b46611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca9061251c565b60405180910390fd5b610bdb6108e1565b82511115610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c159061253c565b60405180910390fd5b8051825114610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c599061245c565b60405180910390fd5b6000610c6e600461142a565b90505b6000811115610cfc576000610c916000600461143f90919063ffffffff16565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cec81600461156890919063ffffffff16565b5050808060019003915050610c71565b50600080600090505b8351811015610e5f576000848281518110610d1c57fe5b60200260200101519050610d3a81600461159890919063ffffffff16565b15610d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d719061257c565b60405180910390fd5b6000848381518110610d8857fe5b6020026020010151905060648111158015610da35750600081115b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906124fc565b60405180910390fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e39818561151390919063ffffffff16565b9350610e4f8260046115c890919063ffffffff16565b5050508080600101915050610d05565b5060648114610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a9061259c565b60405180910390fd5b7fc3f1591f132864f89c86569379ff83036d5c5faa28d6ce4b3c9b9a2d21364c0860405160405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610f2f91906125dc565b600060405180830381600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b505050507f97ea5c7a76cabd16d669e80b9f5972997a27a2e8ae7a1f3daf7d6bc92f936587600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051610fb49291906123cf565b60405180910390a150565b610fc7611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b9061251c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa382d6de23230b4513b2ee62dcfa30957a86ccaf67a224d61a08bbff48348e63600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516110e6919061237d565b60405180910390a150565b60026020528060005260406000206000915090505481565b611111611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461119e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111959061251c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561120e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112059061247c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600061139c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115f8565b905092915050565b6114258363a9059cbb60e01b84846040516024016113c39291906123cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611653565b505050565b60006114388260000161171a565b9050919050565b600061144e836000018361172b565b60001c905092915050565b60008083141561146c57600090506114c3565b600082840290508284828161147d57fe5b04146114be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b5906124dc565b60405180910390fd5b809150505b92915050565b600061150b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611798565b905092915050565b60008082840190508381101561155e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115559061249c565b60405180910390fd5b8091505092915050565b6000611590836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6117f9565b905092915050565b60006115c0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6118e1565b905092915050565b60006115f0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611904565b905092915050565b6000838311158290611640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611637919061241a565b60405180910390fd5b5060008385039050809150509392505050565b60606116b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119749092919063ffffffff16565b905060008151111561171557808060200190518101906116d59190611ced565b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b906125bc565b60405180910390fd5b5b505050565b600081600001805490509050919050565b600081836000018054905011611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d9061243c565b60405180910390fd5b82600001828154811061178557fe5b9060005260206000200154905092915050565b600080831182906117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d6919061241a565b60405180910390fd5b5060008385816117eb57fe5b049050809150509392505050565b600080836001016000848152602001908152602001600020549050600081146118d5576000600182039050600060018660000180549050039050600086600001828154811061184457fe5b906000526020600020015490508087600001848154811061186157fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061189957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506118db565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061191083836118e1565b61196957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061196e565b600090505b92915050565b6060611983848460008561198c565b90509392505050565b606061199785611aaf565b6119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd9061255c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611a009190612366565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b50915091508115611a57578092505050611aa7565b600081511115611a6a5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e919061241a565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050611ad1816127a1565b92915050565b600082601f830112611ae857600080fd5b8135611afb611af682612624565b6125f7565b91508181835260208401935060208101905083856020840282011115611b2057600080fd5b60005b83811015611b505781611b368882611ac2565b845260208401935060208301925050600181019050611b23565b5050505092915050565b600082601f830112611b6b57600080fd5b8135611b7e611b798261264c565b6125f7565b91508181835260208401935060208101905083856020840282011115611ba357600080fd5b60005b83811015611bd35781611bb98882611bf2565b845260208401935060208301925050600181019050611ba6565b5050505092915050565b600081519050611bec816127b8565b92915050565b600081359050611c01816127cf565b92915050565b600081519050611c16816127cf565b92915050565b600060208284031215611c2e57600080fd5b6000611c3c84828501611ac2565b91505092915050565b60008060408385031215611c5857600080fd5b6000611c6685828601611ac2565b9250506020611c7785828601611ac2565b9150509250929050565b60008060408385031215611c9457600080fd5b600083013567ffffffffffffffff811115611cae57600080fd5b611cba85828601611ad7565b925050602083013567ffffffffffffffff811115611cd757600080fd5b611ce385828601611b5a565b9150509250929050565b600060208284031215611cff57600080fd5b6000611d0d84828501611bdd565b91505092915050565b600060208284031215611d2857600080fd5b6000611d3684828501611bf2565b91505092915050565b600060208284031215611d5157600080fd5b6000611d5f84828501611c07565b91505092915050565b6000611d748383611d8f565b60208301905092915050565b611d8981612727565b82525050565b611d98816126df565b82525050565b611da7816126df565b82525050565b6000611db882612684565b611dc281856126b2565b9350611dcd83612674565b8060005b83811015611dfe578151611de58882611d68565b9750611df0836126a5565b925050600181019050611dd1565b5085935050505092915050565b6000611e168261268f565b611e2081856126c3565b9350611e3081856020860161275d565b80840191505092915050565b6000611e478261269a565b611e5181856126ce565b9350611e6181856020860161275d565b611e6a81612790565b840191505092915050565b6000611e826022836126ce565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611ee86049836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a207360008301527f68617265732066756e6374696f6e20696e666f726d6174696f6e20617269747960208301527f206d69736d6174636800000000000000000000000000000000000000000000006040830152606082019050919050565b6000611f746026836126ce565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611fda601b836126ce565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061201a6025836126ce565b91507f56657374696e6753706c69747465723a3a73706c69743a20656d70747920626160008301527f6c616e63650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006120806021836126ce565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006120e66035836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206960008301527f6e76616c69642076616c7565206f6620736861726500000000000000000000006020830152604082019050919050565b600061214c6020836126ce565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061218c6030836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a207460008301527f6f6f206d616e79206163636f756e7473000000000000000000000000000000006020830152604082019050919050565b60006121f2601d836126ce565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006122326030836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206460008301527f75706c6963617465206163636f756e74000000000000000000000000000000006020830152604082019050919050565b60006122986034836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206960008301527f6e76616c69642073756d206f66207368617265730000000000000000000000006020830152604082019050919050565b60006122fe602a836126ce565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6123608161271d565b82525050565b60006123728284611e0b565b915081905092915050565b60006020820190506123926000830184611d9e565b92915050565b60006060820190506123ad6000830186611d9e565b6123ba6020830185611d80565b6123c76040830184612357565b949350505050565b60006040820190506123e46000830185611d9e565b6123f16020830184612357565b9392505050565b600060208201905081810360008301526124128184611dad565b905092915050565b600060208201905081810360008301526124348184611e3c565b905092915050565b6000602082019050818103600083015261245581611e75565b9050919050565b6000602082019050818103600083015261247581611edb565b9050919050565b6000602082019050818103600083015261249581611f67565b9050919050565b600060208201905081810360008301526124b581611fcd565b9050919050565b600060208201905081810360008301526124d58161200d565b9050919050565b600060208201905081810360008301526124f581612073565b9050919050565b60006020820190508181036000830152612515816120d9565b9050919050565b600060208201905081810360008301526125358161213f565b9050919050565b600060208201905081810360008301526125558161217f565b9050919050565b60006020820190508181036000830152612575816121e5565b9050919050565b6000602082019050818103600083015261259581612225565b9050919050565b600060208201905081810360008301526125b58161228b565b9050919050565b600060208201905081810360008301526125d5816122f1565b9050919050565b60006020820190506125f16000830184612357565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561261a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561263b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561266357600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126ea826126fd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061273282612739565b9050919050565b60006127448261274b565b9050919050565b6000612756826126fd565b9050919050565b60005b8381101561277b578082015181840152602081019050612760565b8381111561278a576000848401525b50505050565b6000601f19601f8301169050919050565b6127aa816126df565b81146127b557600080fd5b50565b6127c1816126f1565b81146127cc57600080fd5b50565b6127d88161271d565b81146127e357600080fd5b5056fea2646970667358221220717e5dba8fbd210c80f2f568506f44586de8fdf6c742f483b6d7011b5dd8e7f864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063e003f4b011610066578063e003f4b014610211578063e4dc2aa41461022d578063f2fde38b1461025d578063f7888aec14610279576100ea565b80638da5cb5b146101bb5780639341170a146101d95780639b4352c4146101f5576100ea565b806356fa47f0116100c857806356fa47f0146101595780636dbb4bd414610175578063715018a6146101935780638a48ac031461019d576100ea565b806321e5e2c4146100ef57806344c63eec1461011f57806351cff8d91461013d575b600080fd5b61010960048036038101906101049190611c1c565b6102a9565b60405161011691906125dc565b60405180910390f35b6101276102f2565b604051610134919061237d565b60405180910390f35b61015760048036038101906101529190611c1c565b610318565b005b610173600480360381019061016e9190611c1c565b610536565b005b61017d6108e1565b60405161018a91906125dc565b60405180910390f35b61019b6108ea565b005b6101a5610a3d565b6040516101b291906123f8565b60405180910390f35b6101c3610b15565b6040516101d0919061237d565b60405180910390f35b6101f360048036038101906101ee9190611c81565b610b3e565b005b61020f600480360381019061020a9190611d16565b610ed4565b005b61022b60048036038101906102269190611c1c565b610fbf565b005b61024760048036038101906102429190611c1c565b6110f1565b60405161025491906125dc565b60405180910390f35b61027760048036038101906102729190611c1c565b611109565b005b610293600480360381019061028e9190611c45565b6112cb565b6040516102a091906125dc565b60405180910390f35b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610363611352565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103eb611352565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061047b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135a90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104f06104c9611352565b828473ffffffffffffffffffffffffffffffffffffffff166113a49092919063ffffffff16565b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8261051a611352565b8360405161052a93929190612398565b60405180910390a15050565b6000610612600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b4919061237d565b60206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190611d3f565b61135a90919063ffffffff16565b905060008111610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e906124bc565b60405180910390fd5b60005b610664600461142a565b8110156108a557600061068182600461143f90919063ffffffff16565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006106ef60646106e1848861145990919063ffffffff16565b6114c990919063ffffffff16565b905061078081600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151390919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085281600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151390919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050808060010191505061065a565b507fd54a497a40ae458299f3247b4e63c940f7924a3f8b8b9edf5f94a8120e80c117826040516108d5919061237d565b60405180910390a15050565b60006064905090565b6108f2611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461097f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109769061251c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606080610a4a600461142a565b67ffffffffffffffff81118015610a6057600080fd5b50604051908082528060200260200182016040528015610a8f5781602001602082028036833780820191505090505b50905060005b610a9f600461142a565b811015610b0d57610aba81600461143f90919063ffffffff16565b828281518110610ac657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610a95565b508091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b46611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca9061251c565b60405180910390fd5b610bdb6108e1565b82511115610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c159061253c565b60405180910390fd5b8051825114610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c599061245c565b60405180910390fd5b6000610c6e600461142a565b90505b6000811115610cfc576000610c916000600461143f90919063ffffffff16565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cec81600461156890919063ffffffff16565b5050808060019003915050610c71565b50600080600090505b8351811015610e5f576000848281518110610d1c57fe5b60200260200101519050610d3a81600461159890919063ffffffff16565b15610d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d719061257c565b60405180910390fd5b6000848381518110610d8857fe5b6020026020010151905060648111158015610da35750600081115b610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906124fc565b60405180910390fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e39818561151390919063ffffffff16565b9350610e4f8260046115c890919063ffffffff16565b5050508080600101915050610d05565b5060648114610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a9061259c565b60405180910390fd5b7fc3f1591f132864f89c86569379ff83036d5c5faa28d6ce4b3c9b9a2d21364c0860405160405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610f2f91906125dc565b600060405180830381600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b505050507f97ea5c7a76cabd16d669e80b9f5972997a27a2e8ae7a1f3daf7d6bc92f936587600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051610fb49291906123cf565b60405180910390a150565b610fc7611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b9061251c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa382d6de23230b4513b2ee62dcfa30957a86ccaf67a224d61a08bbff48348e63600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516110e6919061237d565b60405180910390a150565b60026020528060005260406000206000915090505481565b611111611352565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461119e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111959061251c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561120e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112059061247c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600061139c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115f8565b905092915050565b6114258363a9059cbb60e01b84846040516024016113c39291906123cf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611653565b505050565b60006114388260000161171a565b9050919050565b600061144e836000018361172b565b60001c905092915050565b60008083141561146c57600090506114c3565b600082840290508284828161147d57fe5b04146114be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b5906124dc565b60405180910390fd5b809150505b92915050565b600061150b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611798565b905092915050565b60008082840190508381101561155e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115559061249c565b60405180910390fd5b8091505092915050565b6000611590836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6117f9565b905092915050565b60006115c0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6118e1565b905092915050565b60006115f0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611904565b905092915050565b6000838311158290611640576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611637919061241a565b60405180910390fd5b5060008385039050809150509392505050565b60606116b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119749092919063ffffffff16565b905060008151111561171557808060200190518101906116d59190611ced565b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b906125bc565b60405180910390fd5b5b505050565b600081600001805490509050919050565b600081836000018054905011611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d9061243c565b60405180910390fd5b82600001828154811061178557fe5b9060005260206000200154905092915050565b600080831182906117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d6919061241a565b60405180910390fd5b5060008385816117eb57fe5b049050809150509392505050565b600080836001016000848152602001908152602001600020549050600081146118d5576000600182039050600060018660000180549050039050600086600001828154811061184457fe5b906000526020600020015490508087600001848154811061186157fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061189957fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506118db565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061191083836118e1565b61196957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061196e565b600090505b92915050565b6060611983848460008561198c565b90509392505050565b606061199785611aaf565b6119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd9061255c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611a009190612366565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b50915091508115611a57578092505050611aa7565b600081511115611a6a5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e919061241a565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050611ad1816127a1565b92915050565b600082601f830112611ae857600080fd5b8135611afb611af682612624565b6125f7565b91508181835260208401935060208101905083856020840282011115611b2057600080fd5b60005b83811015611b505781611b368882611ac2565b845260208401935060208301925050600181019050611b23565b5050505092915050565b600082601f830112611b6b57600080fd5b8135611b7e611b798261264c565b6125f7565b91508181835260208401935060208101905083856020840282011115611ba357600080fd5b60005b83811015611bd35781611bb98882611bf2565b845260208401935060208301925050600181019050611ba6565b5050505092915050565b600081519050611bec816127b8565b92915050565b600081359050611c01816127cf565b92915050565b600081519050611c16816127cf565b92915050565b600060208284031215611c2e57600080fd5b6000611c3c84828501611ac2565b91505092915050565b60008060408385031215611c5857600080fd5b6000611c6685828601611ac2565b9250506020611c7785828601611ac2565b9150509250929050565b60008060408385031215611c9457600080fd5b600083013567ffffffffffffffff811115611cae57600080fd5b611cba85828601611ad7565b925050602083013567ffffffffffffffff811115611cd757600080fd5b611ce385828601611b5a565b9150509250929050565b600060208284031215611cff57600080fd5b6000611d0d84828501611bdd565b91505092915050565b600060208284031215611d2857600080fd5b6000611d3684828501611bf2565b91505092915050565b600060208284031215611d5157600080fd5b6000611d5f84828501611c07565b91505092915050565b6000611d748383611d8f565b60208301905092915050565b611d8981612727565b82525050565b611d98816126df565b82525050565b611da7816126df565b82525050565b6000611db882612684565b611dc281856126b2565b9350611dcd83612674565b8060005b83811015611dfe578151611de58882611d68565b9750611df0836126a5565b925050600181019050611dd1565b5085935050505092915050565b6000611e168261268f565b611e2081856126c3565b9350611e3081856020860161275d565b80840191505092915050565b6000611e478261269a565b611e5181856126ce565b9350611e6181856020860161275d565b611e6a81612790565b840191505092915050565b6000611e826022836126ce565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611ee86049836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a207360008301527f68617265732066756e6374696f6e20696e666f726d6174696f6e20617269747960208301527f206d69736d6174636800000000000000000000000000000000000000000000006040830152606082019050919050565b6000611f746026836126ce565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611fda601b836126ce565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061201a6025836126ce565b91507f56657374696e6753706c69747465723a3a73706c69743a20656d70747920626160008301527f6c616e63650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006120806021836126ce565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006120e66035836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206960008301527f6e76616c69642076616c7565206f6620736861726500000000000000000000006020830152604082019050919050565b600061214c6020836126ce565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061218c6030836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a207460008301527f6f6f206d616e79206163636f756e7473000000000000000000000000000000006020830152604082019050919050565b60006121f2601d836126ce565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006122326030836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206460008301527f75706c6963617465206163636f756e74000000000000000000000000000000006020830152604082019050919050565b60006122986034836126ce565b91507f56657374696e6753706c69747465723a3a6368616e67655368617265733a206960008301527f6e76616c69642073756d206f66207368617265730000000000000000000000006020830152604082019050919050565b60006122fe602a836126ce565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6123608161271d565b82525050565b60006123728284611e0b565b915081905092915050565b60006020820190506123926000830184611d9e565b92915050565b60006060820190506123ad6000830186611d9e565b6123ba6020830185611d80565b6123c76040830184612357565b949350505050565b60006040820190506123e46000830185611d9e565b6123f16020830184612357565b9392505050565b600060208201905081810360008301526124128184611dad565b905092915050565b600060208201905081810360008301526124348184611e3c565b905092915050565b6000602082019050818103600083015261245581611e75565b9050919050565b6000602082019050818103600083015261247581611edb565b9050919050565b6000602082019050818103600083015261249581611f67565b9050919050565b600060208201905081810360008301526124b581611fcd565b9050919050565b600060208201905081810360008301526124d58161200d565b9050919050565b600060208201905081810360008301526124f581612073565b9050919050565b60006020820190508181036000830152612515816120d9565b9050919050565b600060208201905081810360008301526125358161213f565b9050919050565b600060208201905081810360008301526125558161217f565b9050919050565b60006020820190508181036000830152612575816121e5565b9050919050565b6000602082019050818103600083015261259581612225565b9050919050565b600060208201905081810360008301526125b58161228b565b9050919050565b600060208201905081810360008301526125d5816122f1565b9050919050565b60006020820190506125f16000830184612357565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561261a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561263b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561266357600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126ea826126fd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061273282612739565b9050919050565b60006127448261274b565b9050919050565b6000612756826126fd565b9050919050565b60005b8381101561277b578082015181840152602081019050612760565b8381111561278a576000848401525b50505050565b6000601f19601f8301169050919050565b6127aa816126df565b81146127b557600080fd5b50565b6127c1816126f1565b81146127cc57600080fd5b50565b6127d88161271d565b81146127e357600080fd5b5056fea2646970667358221220717e5dba8fbd210c80f2f568506f44586de8fdf6c742f483b6d7011b5dd8e7f864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,address)": {
        "params": {
          "account": "Target account.",
          "token": "Target token."
        },
        "returns": {
          "_0": "Balance of account."
        }
      },
      "changeShares(address[],uint256[])": {
        "params": {
          "accounts": "Accounts list.",
          "shares": "Shares in split."
        }
      },
      "changeVesting(address)": {
        "params": {
          "_vesting": "New vesting contract address."
        }
      },
      "constructor": {
        "params": {
          "_vesting": "Vesting contract address."
        }
      },
      "getAccounts()": {
        "returns": {
          "_0": "Addresses of all accounts with share."
        }
      },
      "getMaxAccounts()": {
        "returns": {
          "_0": "Max accounts for split."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "shareOf(address)": {
        "params": {
          "account": "Target account."
        },
        "returns": {
          "_0": "Share in split."
        }
      },
      "split(address)": {
        "params": {
          "token": "Target token."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vestingWithdraw(uint256)": {
        "params": {
          "periodId": "Target vesting period."
        }
      },
      "withdraw(address)": {
        "params": {
          "token": "Target token."
        }
      }
    },
    "stateVariables": {
      "_accounts": {
        "details": "Accounts list."
      },
      "_balances": {
        "details": "Accounts balances."
      },
      "_share": {
        "details": "Shares of account in split."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SharesChanged()": {
        "notice": "An event emitted when shares changed."
      },
      "Split(address)": {
        "notice": "An event emitted when split a balance."
      },
      "VestingChanged(address)": {
        "notice": "An event emitted when vesting contract address changed."
      },
      "VestingWithdraw(address,uint256)": {
        "notice": "An event emitted when vesting period withdrawal."
      },
      "Withdraw(address,address,uint256)": {
        "notice": "An event emitted when withdrawal a token."
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,address)": {
        "notice": "Get balance of account."
      },
      "changeShares(address[],uint256[])": {
        "notice": "Change shares of accounts in split."
      },
      "changeVesting(address)": {
        "notice": "Change vesting contract address."
      },
      "getAccounts()": {
        "notice": "Get accounts with share list."
      },
      "getMaxAccounts()": {
        "notice": "Get accounts limit for split."
      },
      "shareOf(address)": {
        "notice": "Get share of account in split."
      },
      "split(address)": {
        "notice": "Split token to all accounts."
      },
      "totalSupply(address)": {
        "notice": "Distributed tokens."
      },
      "vesting()": {
        "notice": "Vesting contract address."
      },
      "vestingWithdraw(uint256)": {
        "notice": "Withdraw reward from vesting contract."
      },
      "withdraw(address)": {
        "notice": "Withdraw token balance to sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9464,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "vesting",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9469,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9476,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9479,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "_accounts",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)1763_storage"
      },
      {
        "astId": 9484,
        "contract": "contracts/VestingSplitter.sol:VestingSplitter",
        "label": "_share",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1763_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1762,
            "contract": "contracts/VestingSplitter.sol:VestingSplitter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1583_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1583_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1578,
            "contract": "contracts/VestingSplitter.sol:VestingSplitter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1582,
            "contract": "contracts/VestingSplitter.sol:VestingSplitter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
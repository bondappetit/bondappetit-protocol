{
  "address": "0xbAB3d0239DD96A5853C80e8501745e2457CD728E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controlledContract",
          "type": "address"
        }
      ],
      "name": "InvalidState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "name": "ProtocolContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedContract",
          "type": "address"
        }
      ],
      "name": "ProtocolContractRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controlledContract",
          "type": "address"
        }
      ],
      "name": "ValidatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "addProtocolContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controlledContract",
          "type": "address"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolContractsList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "removeProtocolContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "removeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorsList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x381e0a5b013574fab8575de21c0f32d50e7f6e644c79488e6c16d85d9471da28",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xbAB3d0239DD96A5853C80e8501745e2457CD728E",
    "transactionIndex": 4,
    "gasUsed": "1846373",
    "logsBloom": "0x
    "blockHash": "0x7866c27fef73de15f38a86c15d436f7ac7b40ea23f61c437711b044a096f88e1",
    "transactionHash": "0x381e0a5b013574fab8575de21c0f32d50e7f6e644c79488e6c16d85d9471da28",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 7789256,
        "transactionHash": "0x381e0a5b013574fab8575de21c0f32d50e7f6e644c79488e6c16d85d9471da28",
        "address": "0xbAB3d0239DD96A5853C80e8501745e2457CD728E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x7866c27fef73de15f38a86c15d436f7ac7b40ea23f61c437711b044a096f88e1"
      }
    ],
    "blockNumber": 7789256,
    "cumulativeGasUsed": "2963983",
    "status": 1,
    "byzantium": true
  },
  "args": [
    50
  ],
  "solcInputHash": "0cf4cc9fdb3e6a35148e94b9ef4590e5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controlledContract\",\"type\":\"address\"}],\"name\":\"InvalidState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ProtocolContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedContract\",\"type\":\"address\"}],\"name\":\"ProtocolContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controlledContract\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addProtocolContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controlledContract\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolContractsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeProtocolContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProtocolContract(address)\":{\"params\":{\"_contract\":\"Protocol contract address.\"}},\"addValidator(address,address)\":{\"params\":{\"controlledContract\":\"Pausable contract address (zero address for all protocol contracts).\",\"validator\":\"Validator address.\"}},\"constructor\":{\"params\":{\"_maxSize\":\"Maximal count of protocol contracts and validators.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"protocolContractsList()\":{\"returns\":{\"_0\":\"Addresses of all protocol contracts.\"}},\"removeProtocolContract(address)\":{\"params\":{\"_contract\":\"Protocol contract address.\"}},\"removeValidator(address)\":{\"params\":{\"validator\":\"Validator address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"size()\":{\"returns\":{\"_0\":\"Validators count of agregate.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validate(address)\":{\"params\":{\"validator\":\"Target validator.\"},\"returns\":{\"_0\":\"Is state valid.\"}},\"validatorsList()\":{\"returns\":{\"_0\":\"Validators addresses list.\"}}},\"stateVariables\":{\"protocolContracts\":{\"details\":\"Protocol contracts list.\"},\"validatorsIndex\":{\"details\":\"Validators list.\"}},\"version\":1},\"userdoc\":{\"events\":{\"InvalidState(address,address)\":{\"notice\":\"An event thats emitted when state invalid.\"},\"ProtocolContractAdded(address)\":{\"notice\":\"An event thats emitted when protocol contract added.\"},\"ProtocolContractRemoved(address)\":{\"notice\":\"An event thats emitted when protocol contract removed.\"},\"ValidatorAdded(address,address)\":{\"notice\":\"An event thats emitted when validator added.\"},\"ValidatorRemoved(address)\":{\"notice\":\"An event thats emitted when validator removed.\"}},\"kind\":\"user\",\"methods\":{\"maxSize()\":{\"notice\":\"The number of validators in agregate.\"},\"validate(address)\":{\"notice\":\"Validate protocol state and pause controlled contract if state invalid.\"},\"validators(address)\":{\"notice\":\"Validator and controlled contract (zero address for all protocol contracts).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alert/ProtocolValidator.sol\":\"ProtocolValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/alert/IValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IValidator {\\n    /**\\n     * @notice Validate protocol state.\\n     * @return Is state valid.\\n     */\\n    function validate() external view returns(bool);\\n}\\n\",\"keccak256\":\"0x7e8e6aff23785d14f0a64f49fbe2c5d42c599b40dca2efa5d4f8a47cafbff690\",\"license\":\"MIT\"},\"contracts/alert/ProtocolValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../utils/OwnablePausable.sol\\\";\\nimport \\\"./IValidator.sol\\\";\\n\\ncontract ProtocolValidator is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice The number of validators in agregate.\\n    uint256 public maxSize;\\n\\n    /// @dev Protocol contracts list.\\n    EnumerableSet.AddressSet internal protocolContracts;\\n\\n    /// @notice Validator and controlled contract (zero address for all protocol contracts).\\n    mapping(address => address) public validators;\\n\\n    /// @dev Validators list.\\n    EnumerableSet.AddressSet internal validatorsIndex;\\n\\n    /// @notice An event thats emitted when protocol contract added.\\n    event ProtocolContractAdded(address newContract);\\n\\n    /// @notice An event thats emitted when protocol contract removed.\\n    event ProtocolContractRemoved(address removedContract);\\n\\n    /// @notice An event thats emitted when validator added.\\n    event ValidatorAdded(address validator, address controlledContract);\\n\\n    /// @notice An event thats emitted when validator removed.\\n    event ValidatorRemoved(address validator);\\n\\n    /// @notice An event thats emitted when state invalid.\\n    event InvalidState(address validator, address controlledContract);\\n\\n    /**\\n     * @param _maxSize Maximal count of protocol contracts and validators.\\n     */\\n    constructor(uint256 _maxSize) public {\\n        maxSize = _maxSize;\\n    }\\n\\n    /**\\n     * @return Validators count of agregate.\\n     */\\n    function size() public view returns (uint256) {\\n        return validatorsIndex.length().add(protocolContracts.length());\\n    }\\n\\n    /**\\n     * @param _contract Protocol contract address.\\n     */\\n    function addProtocolContract(address _contract) external onlyOwner {\\n        require(_contract != address(0), \\\"ProtocolValidator::addProtocolContract: invalid contract address\\\");\\n        require(protocolContracts.contains(_contract) || size() < maxSize, \\\"ProtocolValidator::addProtocolContract: too many protocol contracts\\\");\\n\\n        protocolContracts.add(_contract);\\n        emit ProtocolContractAdded(_contract);\\n    }\\n\\n    /**\\n     * @param _contract Protocol contract address.\\n     */\\n    function removeProtocolContract(address _contract) external onlyOwner {\\n        require(_contract != address(0), \\\"ProtocolValidator::removeProtocolContract: invalid contract address\\\");\\n\\n        protocolContracts.remove(_contract);\\n        emit ProtocolContractRemoved(_contract);\\n    }\\n\\n    /**\\n     * @return Addresses of all protocol contracts.\\n     */\\n    function protocolContractsList() external view returns (address[] memory) {\\n        address[] memory result = new address[](protocolContracts.length());\\n\\n        for (uint256 i = 0; i < protocolContracts.length(); i++) {\\n            result[i] = protocolContracts.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @param validator Validator address.\\n     * @param controlledContract Pausable contract address (zero address for all protocol contracts).\\n     */\\n    function addValidator(address validator, address controlledContract) external onlyOwner {\\n        require(validator != address(0), \\\"ProtocolValidator::addValidator: invalid validator address\\\");\\n        require(validatorsIndex.contains(validator) || size() < maxSize, \\\"ProtocolValidator::addValidator: too many validators\\\");\\n\\n        validators[validator] = controlledContract;\\n        validatorsIndex.add(validator);\\n        emit ValidatorAdded(validator, controlledContract);\\n    }\\n\\n    /**\\n     * @param validator Validator address.\\n     */\\n    function removeValidator(address validator) external onlyOwner {\\n        require(validator != address(0), \\\"ProtocolValidator::removeValidator: invalid validator address\\\");\\n\\n        validators[validator] = address(0);\\n        validatorsIndex.remove(validator);\\n        emit ValidatorRemoved(validator);\\n    }\\n\\n    /**\\n     * @return Validators addresses list.\\n     */\\n    function validatorsList() external view returns (address[] memory) {\\n        address[] memory result = new address[](validatorsIndex.length());\\n\\n        for (uint256 i = 0; i < validatorsIndex.length(); i++) {\\n            result[i] = validatorsIndex.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Pause contract or all protocol contracts.\\n     * @param controlledContract Paused contract (zero address for all protocol contracts).\\n     */\\n    function _pause(address controlledContract) internal {\\n        if (controlledContract == address(0)) {\\n            for (uint256 i = 0; i < protocolContracts.length(); i++) {\\n                _pause(protocolContracts.at(i));\\n            }\\n        } else {\\n            OwnablePausable target = OwnablePausable(controlledContract);\\n            address pauser = target.pauser();\\n            require(pauser == address(this), \\\"ProtocolValidator::_pause: target contract not control\\\");\\n            bool paused = target.paused();\\n\\n            if (!paused) {\\n                target.pause();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate protocol state and pause controlled contract if state invalid.\\n     * @param validator Target validator.\\n     * @return Is state valid.\\n     */\\n    function validate(address validator) external returns (bool) {\\n        require(validatorsIndex.contains(validator), \\\"ProtocolValidator::validate: validator not found\\\");\\n\\n        bool isValid = IValidator(validator).validate();\\n        if (!isValid) {\\n            _pause(validators[validator]);\\n            emit InvalidState(validator, validators[validator]);\\n        }\\n\\n        return isValid;\\n    }\\n}\\n\",\"keccak256\":\"0xa4f450e2885c8277a37ec97899eb06f38510d8a41e8969066484d90afe0ba6a8\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200211c3803806200211c833981810160405281019062000037919062000114565b600062000049620000f560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350806001819055505062000164565b600033905090565b6000815190506200010e816200014a565b92915050565b6000602082840312156200012757600080fd5b60006200013784828501620000fd565b91505092915050565b6000819050919050565b620001558162000140565b81146200016157600080fd5b50565b611fa880620001746000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063949d225d1161008c578063daf4c06611610066578063daf4c066146101dc578063f2fde38b146101f8578063fa52c7d814610214578063fc0eb91714610244576100cf565b8063949d225d14610184578063b1819c2b146101a2578063bb8ac08f146101be576100cf565b80630b6db70a146100d4578063207c64fb146100f25780632565b1591461012257806340a141ff14610140578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc610260565b6040516100e99190611cda565b60405180910390f35b61010c60048036038101906101079190611665565b610338565b6040516101199190611cfc565b60405180910390f35b61012a61051e565b6040516101379190611e97565b60405180910390f35b61015a60048036038101906101559190611665565b610524565b005b6101646106f7565b005b61016e61084a565b60405161017b9190611c96565b60405180910390f35b61018c610873565b6040516101999190611e97565b60405180910390f35b6101bc60048036038101906101b791906116b7565b61089f565b005b6101c6610ada565b6040516101d39190611cda565b60405180910390f35b6101f660048036038101906101f19190611665565b610bb2565b005b610212600480360381019061020d9190611665565b610d06565b005b61022e60048036038101906102299190611665565b610ec8565b60405161023b9190611c96565b60405180910390f35b61025e60048036038101906102599190611665565b610efb565b005b60608061026d60026110b5565b67ffffffffffffffff8111801561028357600080fd5b506040519080825280602002602001820160405280156102b25781602001602082028036833780820191505090505b50905060005b6102c260026110b5565b811015610330576102dd8160026110ca90919063ffffffff16565b8282815181106102e957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506102b8565b508091505090565b600061034e8260056110e490919063ffffffff16565b61038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038490611e17565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16636901f6686040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906116f3565b9050806105155761047c600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611114565b7f2547df44eb7f58733796ecf0ab786c52c1a41b78298dc9b00856f901db625e6983600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161050c929190611cb1565b60405180910390a15b80915050919050565b60015481565b61052c611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090611d97565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106bc81600561137890919063ffffffff16565b507fe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f1816040516106ec9190611c96565b60405180910390a150565b6106ff611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061089a61088260026110b5565b61088c60056110b5565b6113a890919063ffffffff16565b905090565b6108a7611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092b90611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90611d17565b60405180910390fd5b6109b88260056110e490919063ffffffff16565b806109cb57506001546109c9610873565b105b610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190611db7565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a9c8260056113fd90919063ffffffff16565b507f8064a302796c89446a96d63470b5b036212da26bd2debe5bec73e0170a9a5e838282604051610ace929190611cb1565b60405180910390a15050565b606080610ae760056110b5565b67ffffffffffffffff81118015610afd57600080fd5b50604051908082528060200260200182016040528015610b2c5781602001602082028036833780820191505090505b50905060005b610b3c60056110b5565b811015610baa57610b578160056110ca90919063ffffffff16565b828281518110610b6357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610b32565b508091505090565b610bba611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90611e57565b60405180910390fd5b610ccb81600261137890919063ffffffff16565b507f1c68bd0b5bc3e008aed6e012ac977984134eaf2c065d92e33a471e2d189ad12381604051610cfb9190611c96565b60405180910390a150565b610d0e611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9290611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0290611d57565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f03611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8790611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611000576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff790611e77565b60405180910390fd5b6110148160026110e490919063ffffffff16565b806110275750600154611025610873565b105b611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90611dd7565b60405180910390fd5b61107a8160026113fd90919063ffffffff16565b507fb0a0dc938adbda85f4d549c5d17ba61a481083f5e33cbc09b165067a2939d4f7816040516110aa9190611c96565b60405180910390a150565b60006110c38260000161142d565b9050919050565b60006110d9836000018361143e565b60001c905092915050565b600061110c836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6114ab565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561118c5760005b61115660026110b5565b811015611186576111796111748260026110ca90919063ffffffff16565b611114565b808060010191505061114c565b5061136d565b600081905060008173ffffffffffffffffffffffffffffffffffffffff16639fd0506d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d957600080fd5b505afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611211919061168e565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127890611df7565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c957600080fd5b505afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130191906116f3565b905080611369578273ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050505b5050505b50565b600033905090565b60006113a0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6114ce565b905092915050565b6000808284019050838110156113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90611d77565b60405180910390fd5b8091505092915050565b6000611425836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6115b6565b905092915050565b600081600001805490509050919050565b600081836000018054905011611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090611d37565b60405180910390fd5b82600001828154811061149857fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146115aa576000600182039050600060018660000180549050039050600086600001828154811061151957fe5b906000526020600020015490508087600001848154811061153657fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061156e57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506115b0565b60009150505b92915050565b60006115c283836114ab565b61161b578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611620565b600090505b92915050565b60008135905061163581611f44565b92915050565b60008151905061164a81611f44565b92915050565b60008151905061165f81611f5b565b92915050565b60006020828403121561167757600080fd5b600061168584828501611626565b91505092915050565b6000602082840312156116a057600080fd5b60006116ae8482850161163b565b91505092915050565b600080604083850312156116ca57600080fd5b60006116d885828601611626565b92505060206116e985828601611626565b9150509250929050565b60006020828403121561170557600080fd5b600061171384828501611650565b91505092915050565b60006117288383611734565b60208301905092915050565b61173d81611efc565b82525050565b61174c81611efc565b82525050565b600061175d82611ec2565b6117678185611eda565b935061177283611eb2565b8060005b838110156117a357815161178a888261171c565b975061179583611ecd565b925050600181019050611776565b5085935050505092915050565b6117b981611f0e565b82525050565b60006117cc603a83611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646456616c696461746f723a60008301527f20696e76616c69642076616c696461746f7220616464726573730000000000006020830152604082019050919050565b6000611832602283611eeb565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611898602683611eeb565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118fe601b83611eeb565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061193e603d83611eeb565b91507f50726f746f636f6c56616c696461746f723a3a72656d6f766556616c6964617460008301527f6f723a20696e76616c69642076616c696461746f7220616464726573730000006020830152604082019050919050565b60006119a4603483611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646456616c696461746f723a60008301527f20746f6f206d616e792076616c696461746f72730000000000000000000000006020830152604082019050919050565b6000611a0a604383611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646450726f746f636f6c436f60008301527f6e74726163743a20746f6f206d616e792070726f746f636f6c20636f6e74726160208301527f63747300000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611a96603683611eeb565b91507f50726f746f636f6c56616c696461746f723a3a5f70617573653a20746172676560008301527f7420636f6e7472616374206e6f7420636f6e74726f6c000000000000000000006020830152604082019050919050565b6000611afc603083611eeb565b91507f50726f746f636f6c56616c696461746f723a3a76616c69646174653a2076616c60008301527f696461746f72206e6f7420666f756e64000000000000000000000000000000006020830152604082019050919050565b6000611b62602083611eeb565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611ba2604383611eeb565b91507f50726f746f636f6c56616c696461746f723a3a72656d6f766550726f746f636f60008301527f6c436f6e74726163743a20696e76616c696420636f6e7472616374206164647260208301527f65737300000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611c2e604083611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646450726f746f636f6c436f60008301527f6e74726163743a20696e76616c696420636f6e747261637420616464726573736020830152604082019050919050565b611c9081611f3a565b82525050565b6000602082019050611cab6000830184611743565b92915050565b6000604082019050611cc66000830185611743565b611cd36020830184611743565b9392505050565b60006020820190508181036000830152611cf48184611752565b905092915050565b6000602082019050611d1160008301846117b0565b92915050565b60006020820190508181036000830152611d30816117bf565b9050919050565b60006020820190508181036000830152611d5081611825565b9050919050565b60006020820190508181036000830152611d708161188b565b9050919050565b60006020820190508181036000830152611d90816118f1565b9050919050565b60006020820190508181036000830152611db081611931565b9050919050565b60006020820190508181036000830152611dd081611997565b9050919050565b60006020820190508181036000830152611df0816119fd565b9050919050565b60006020820190508181036000830152611e1081611a89565b9050919050565b60006020820190508181036000830152611e3081611aef565b9050919050565b60006020820190508181036000830152611e5081611b55565b9050919050565b60006020820190508181036000830152611e7081611b95565b9050919050565b60006020820190508181036000830152611e9081611c21565b9050919050565b6000602082019050611eac6000830184611c87565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f0782611f1a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611f4d81611efc565b8114611f5857600080fd5b50565b611f6481611f0e565b8114611f6f57600080fd5b5056fea2646970667358221220a2fd18b49149524ff33fdc2f849e2432c097e963aa7510b80ec1f349d5c4dc2664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063949d225d1161008c578063daf4c06611610066578063daf4c066146101dc578063f2fde38b146101f8578063fa52c7d814610214578063fc0eb91714610244576100cf565b8063949d225d14610184578063b1819c2b146101a2578063bb8ac08f146101be576100cf565b80630b6db70a146100d4578063207c64fb146100f25780632565b1591461012257806340a141ff14610140578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc610260565b6040516100e99190611cda565b60405180910390f35b61010c60048036038101906101079190611665565b610338565b6040516101199190611cfc565b60405180910390f35b61012a61051e565b6040516101379190611e97565b60405180910390f35b61015a60048036038101906101559190611665565b610524565b005b6101646106f7565b005b61016e61084a565b60405161017b9190611c96565b60405180910390f35b61018c610873565b6040516101999190611e97565b60405180910390f35b6101bc60048036038101906101b791906116b7565b61089f565b005b6101c6610ada565b6040516101d39190611cda565b60405180910390f35b6101f660048036038101906101f19190611665565b610bb2565b005b610212600480360381019061020d9190611665565b610d06565b005b61022e60048036038101906102299190611665565b610ec8565b60405161023b9190611c96565b60405180910390f35b61025e60048036038101906102599190611665565b610efb565b005b60608061026d60026110b5565b67ffffffffffffffff8111801561028357600080fd5b506040519080825280602002602001820160405280156102b25781602001602082028036833780820191505090505b50905060005b6102c260026110b5565b811015610330576102dd8160026110ca90919063ffffffff16565b8282815181106102e957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506102b8565b508091505090565b600061034e8260056110e490919063ffffffff16565b61038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038490611e17565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16636901f6686040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906116f3565b9050806105155761047c600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611114565b7f2547df44eb7f58733796ecf0ab786c52c1a41b78298dc9b00856f901db625e6983600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161050c929190611cb1565b60405180910390a15b80915050919050565b60015481565b61052c611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b090611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090611d97565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106bc81600561137890919063ffffffff16565b507fe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f1816040516106ec9190611c96565b60405180910390a150565b6106ff611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061089a61088260026110b5565b61088c60056110b5565b6113a890919063ffffffff16565b905090565b6108a7611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092b90611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90611d17565b60405180910390fd5b6109b88260056110e490919063ffffffff16565b806109cb57506001546109c9610873565b105b610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190611db7565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a9c8260056113fd90919063ffffffff16565b507f8064a302796c89446a96d63470b5b036212da26bd2debe5bec73e0170a9a5e838282604051610ace929190611cb1565b60405180910390a15050565b606080610ae760056110b5565b67ffffffffffffffff81118015610afd57600080fd5b50604051908082528060200260200182016040528015610b2c5781602001602082028036833780820191505090505b50905060005b610b3c60056110b5565b811015610baa57610b578160056110ca90919063ffffffff16565b828281518110610b6357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610b32565b508091505090565b610bba611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90611e57565b60405180910390fd5b610ccb81600261137890919063ffffffff16565b507f1c68bd0b5bc3e008aed6e012ac977984134eaf2c065d92e33a471e2d189ad12381604051610cfb9190611c96565b60405180910390a150565b610d0e611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9290611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0290611d57565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f03611370565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8790611e37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611000576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff790611e77565b60405180910390fd5b6110148160026110e490919063ffffffff16565b806110275750600154611025610873565b105b611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90611dd7565b60405180910390fd5b61107a8160026113fd90919063ffffffff16565b507fb0a0dc938adbda85f4d549c5d17ba61a481083f5e33cbc09b165067a2939d4f7816040516110aa9190611c96565b60405180910390a150565b60006110c38260000161142d565b9050919050565b60006110d9836000018361143e565b60001c905092915050565b600061110c836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6114ab565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561118c5760005b61115660026110b5565b811015611186576111796111748260026110ca90919063ffffffff16565b611114565b808060010191505061114c565b5061136d565b600081905060008173ffffffffffffffffffffffffffffffffffffffff16639fd0506d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d957600080fd5b505afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611211919061168e565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127890611df7565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c957600080fd5b505afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130191906116f3565b905080611369578273ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050505b5050505b50565b600033905090565b60006113a0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6114ce565b905092915050565b6000808284019050838110156113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90611d77565b60405180910390fd5b8091505092915050565b6000611425836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6115b6565b905092915050565b600081600001805490509050919050565b600081836000018054905011611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090611d37565b60405180910390fd5b82600001828154811061149857fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146115aa576000600182039050600060018660000180549050039050600086600001828154811061151957fe5b906000526020600020015490508087600001848154811061153657fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061156e57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506115b0565b60009150505b92915050565b60006115c283836114ab565b61161b578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611620565b600090505b92915050565b60008135905061163581611f44565b92915050565b60008151905061164a81611f44565b92915050565b60008151905061165f81611f5b565b92915050565b60006020828403121561167757600080fd5b600061168584828501611626565b91505092915050565b6000602082840312156116a057600080fd5b60006116ae8482850161163b565b91505092915050565b600080604083850312156116ca57600080fd5b60006116d885828601611626565b92505060206116e985828601611626565b9150509250929050565b60006020828403121561170557600080fd5b600061171384828501611650565b91505092915050565b60006117288383611734565b60208301905092915050565b61173d81611efc565b82525050565b61174c81611efc565b82525050565b600061175d82611ec2565b6117678185611eda565b935061177283611eb2565b8060005b838110156117a357815161178a888261171c565b975061179583611ecd565b925050600181019050611776565b5085935050505092915050565b6117b981611f0e565b82525050565b60006117cc603a83611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646456616c696461746f723a60008301527f20696e76616c69642076616c696461746f7220616464726573730000000000006020830152604082019050919050565b6000611832602283611eeb565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611898602683611eeb565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118fe601b83611eeb565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061193e603d83611eeb565b91507f50726f746f636f6c56616c696461746f723a3a72656d6f766556616c6964617460008301527f6f723a20696e76616c69642076616c696461746f7220616464726573730000006020830152604082019050919050565b60006119a4603483611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646456616c696461746f723a60008301527f20746f6f206d616e792076616c696461746f72730000000000000000000000006020830152604082019050919050565b6000611a0a604383611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646450726f746f636f6c436f60008301527f6e74726163743a20746f6f206d616e792070726f746f636f6c20636f6e74726160208301527f63747300000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611a96603683611eeb565b91507f50726f746f636f6c56616c696461746f723a3a5f70617573653a20746172676560008301527f7420636f6e7472616374206e6f7420636f6e74726f6c000000000000000000006020830152604082019050919050565b6000611afc603083611eeb565b91507f50726f746f636f6c56616c696461746f723a3a76616c69646174653a2076616c60008301527f696461746f72206e6f7420666f756e64000000000000000000000000000000006020830152604082019050919050565b6000611b62602083611eeb565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611ba2604383611eeb565b91507f50726f746f636f6c56616c696461746f723a3a72656d6f766550726f746f636f60008301527f6c436f6e74726163743a20696e76616c696420636f6e7472616374206164647260208301527f65737300000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611c2e604083611eeb565b91507f50726f746f636f6c56616c696461746f723a3a61646450726f746f636f6c436f60008301527f6e74726163743a20696e76616c696420636f6e747261637420616464726573736020830152604082019050919050565b611c9081611f3a565b82525050565b6000602082019050611cab6000830184611743565b92915050565b6000604082019050611cc66000830185611743565b611cd36020830184611743565b9392505050565b60006020820190508181036000830152611cf48184611752565b905092915050565b6000602082019050611d1160008301846117b0565b92915050565b60006020820190508181036000830152611d30816117bf565b9050919050565b60006020820190508181036000830152611d5081611825565b9050919050565b60006020820190508181036000830152611d708161188b565b9050919050565b60006020820190508181036000830152611d90816118f1565b9050919050565b60006020820190508181036000830152611db081611931565b9050919050565b60006020820190508181036000830152611dd081611997565b9050919050565b60006020820190508181036000830152611df0816119fd565b9050919050565b60006020820190508181036000830152611e1081611a89565b9050919050565b60006020820190508181036000830152611e3081611aef565b9050919050565b60006020820190508181036000830152611e5081611b55565b9050919050565b60006020820190508181036000830152611e7081611b95565b9050919050565b60006020820190508181036000830152611e9081611c21565b9050919050565b6000602082019050611eac6000830184611c87565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f0782611f1a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b611f4d81611efc565b8114611f5857600080fd5b50565b611f6481611f0e565b8114611f6f57600080fd5b5056fea2646970667358221220a2fd18b49149524ff33fdc2f849e2432c097e963aa7510b80ec1f349d5c4dc2664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProtocolContract(address)": {
        "params": {
          "_contract": "Protocol contract address."
        }
      },
      "addValidator(address,address)": {
        "params": {
          "controlledContract": "Pausable contract address (zero address for all protocol contracts).",
          "validator": "Validator address."
        }
      },
      "constructor": {
        "params": {
          "_maxSize": "Maximal count of protocol contracts and validators."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "protocolContractsList()": {
        "returns": {
          "_0": "Addresses of all protocol contracts."
        }
      },
      "removeProtocolContract(address)": {
        "params": {
          "_contract": "Protocol contract address."
        }
      },
      "removeValidator(address)": {
        "params": {
          "validator": "Validator address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "size()": {
        "returns": {
          "_0": "Validators count of agregate."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validate(address)": {
        "params": {
          "validator": "Target validator."
        },
        "returns": {
          "_0": "Is state valid."
        }
      },
      "validatorsList()": {
        "returns": {
          "_0": "Validators addresses list."
        }
      }
    },
    "stateVariables": {
      "protocolContracts": {
        "details": "Protocol contracts list."
      },
      "validatorsIndex": {
        "details": "Validators list."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "InvalidState(address,address)": {
        "notice": "An event thats emitted when state invalid."
      },
      "ProtocolContractAdded(address)": {
        "notice": "An event thats emitted when protocol contract added."
      },
      "ProtocolContractRemoved(address)": {
        "notice": "An event thats emitted when protocol contract removed."
      },
      "ValidatorAdded(address,address)": {
        "notice": "An event thats emitted when validator added."
      },
      "ValidatorRemoved(address)": {
        "notice": "An event thats emitted when validator removed."
      }
    },
    "kind": "user",
    "methods": {
      "maxSize()": {
        "notice": "The number of validators in agregate."
      },
      "validate(address)": {
        "notice": "Validate protocol state and pause controlled contract if state invalid."
      },
      "validators(address)": {
        "notice": "Validator and controlled contract (zero address for all protocol contracts)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10861,
        "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
        "label": "maxSize",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10864,
        "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
        "label": "protocolContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)1763_storage"
      },
      {
        "astId": 10869,
        "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
        "label": "validators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10872,
        "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
        "label": "validatorsIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)1763_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1763_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1762,
            "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1583_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1583_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1578,
            "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1582,
            "contract": "contracts/alert/ProtocolValidator.sol:ProtocolValidator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xB23CE4004b0E92f87E3fd633fF0781D957ccD677",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cumulative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_productToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_cumulativePriceFeed",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "priceFeed",
          "type": "address[]"
        }
      ],
      "name": "CumulativeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "priceFeed",
          "type": "address[]"
        }
      ],
      "name": "TokenAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newUniswapRouter",
          "type": "address"
        }
      ],
      "name": "UniswapRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "_priceUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "priceFeed",
          "type": "address[]"
        }
      ],
      "name": "allowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFromETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "newCumulativePriceFeed",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "changeCumulativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "changeUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulative",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "denyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "product",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProductToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc66a65e836c0dd490d022e6607dcb073a44035ca15567f288202ea3f8c41c45e",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xB23CE4004b0E92f87E3fd633fF0781D957ccD677",
    "transactionIndex": 11,
    "gasUsed": "4631850",
    "logsBloom": "0x
    "blockHash": "0xc4cd93a30aed4144188c178f9ba977e5a3aed60d09d30184aa3d96b1ea281c95",
    "transactionHash": "0xc66a65e836c0dd490d022e6607dcb073a44035ca15567f288202ea3f8c41c45e",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10912603,
        "transactionHash": "0xc66a65e836c0dd490d022e6607dcb073a44035ca15567f288202ea3f8c41c45e",
        "address": "0xB23CE4004b0E92f87E3fd633fF0781D957ccD677",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xc4cd93a30aed4144188c178f9ba977e5a3aed60d09d30184aa3d96b1ea281c95"
      }
    ],
    "blockNumber": 10912603,
    "cumulativeGasUsed": "5599820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C",
    "0xf8e29262466baab1eb19ca53827d986ef2274652",
    "0x14481Ad39F43B901cd022F3b86A0851c69cD88ba",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    [
      "0xfda14021529f108fac0928df1654b5f56117f30f"
    ]
  ],
  "solcInputHash": "70c372195ba0e618f15d362b71bbc694",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cumulative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_productToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_cumulativePriceFeed\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"priceFeed\",\"type\":\"address[]\"}],\"name\":\"CumulativeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"priceFeed\",\"type\":\"address[]\"}],\"name\":\"TokenAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUniswapRouter\",\"type\":\"address\"}],\"name\":\"UniswapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_priceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"priceFeed\",\"type\":\"address[]\"}],\"name\":\"allowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFromETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newCumulativePriceFeed\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"changeCumulativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"changeUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulative\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"denyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProductToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_priceUSD(address)\":{\"params\":{\"token\":\"Target token.\"},\"returns\":{\"_0\":\"Price token at USD.\"}},\"allowToken(address,address[])\":{\"params\":{\"priceFeed\":\"Price feed chain.\",\"token\":\"Allowable token.\"}},\"buy(address,uint256)\":{\"params\":{\"currency\":\"Currency token.\",\"payment\":\"Amount of payment.\"},\"returns\":{\"_0\":\"True if success.\"}},\"buyFromETH()\":{\"returns\":{\"_0\":\"True if success.\"}},\"changeCumulativeToken(address,address[],address)\":{\"params\":{\"newCumulativePriceFeed\":\"Address new price oracle contract.\",\"newToken\":\"Address new cumulative token.\",\"recipient\":\"Address of recipient for withdraw current cumulative balance.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"changeUniswapRouter(address)\":{\"params\":{\"_uniswapRouter\":\"Address new uniswap router contract.\"}},\"constructor\":{\"params\":{\"_cumulative\":\"Address of cumulative token.\",\"_cumulativePriceFeed\":\"Price feeds chain of cumulative token.\",\"_productToken\":\"Address of product token.\",\"_rewardToken\":\"Address of reward token.\",\"_uniswapRouter\":\"Address of Uniswap router contract.\"}},\"denyToken(address)\":{\"params\":{\"token\":\"Denied token.\"}},\"isAllowedToken(address)\":{\"params\":{\"token\":\"Target token.\"},\"returns\":{\"_0\":\"Is target token allowed.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"price(address,uint256)\":{\"params\":{\"currency\":\"Currency token.\",\"payment\":\"Amount of payment.\"},\"returns\":{\"product\":\"Amount of product token.\",\"reward\":\"Amount of reward token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferProductToken(address,uint256)\":{\"params\":{\"amount\":\"Amount of transfered token.\",\"recipient\":\"Address of recipient.\"}},\"transferRewardToken(address,uint256)\":{\"params\":{\"amount\":\"Amount of transfered token.\",\"recipient\":\"Address of recipient.\"}},\"withdraw(address)\":{\"params\":{\"recipient\":\"Recipient of token.\"}}},\"stateVariables\":{\"allowedTokens\":{\"details\":\"Allowed tokens symbols list.\"},\"cumulativePriceFeed\":{\"details\":\"Addresses of cumulative token price feed chain.\"},\"uniswapRouter\":{\"details\":\"Address of UniswapV2Router.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Buy(address,address,uint256,uint256,uint256)\":{\"notice\":\"An event thats emitted when an account buyed token.\"},\"CumulativeChanged(address,address[])\":{\"notice\":\"An event thats emitted when an cumulative token changed.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"TokenAllowed(address,address[])\":{\"notice\":\"An event thats emitted when an token allowed.\"},\"TokenDenied(address)\":{\"notice\":\"An event thats emitted when an token denied.\"},\"UniswapRouterChanged(address)\":{\"notice\":\"An event thats emitted when an uniswap router contract address changed.\"},\"Withdrawal(address,address,uint256)\":{\"notice\":\"An event thats emitted when an cumulative token withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"allowToken(address,address[])\":{\"notice\":\"Add token to tokens white list.\"},\"buy(address,uint256)\":{\"notice\":\"Buy token with ERC20.\"},\"buyFromETH()\":{\"notice\":\"Buy token with ETH.\"},\"changeCumulativeToken(address,address[],address)\":{\"notice\":\"Changed cumulative token address.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"changeUniswapRouter(address)\":{\"notice\":\"Changed uniswap router contract address.\"},\"cumulative()\":{\"notice\":\"Address of cumulative token.\"},\"denyToken(address)\":{\"notice\":\"Remove token from tokens white list.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"price(address,uint256)\":{\"notice\":\"Get token price.\"},\"productToken()\":{\"notice\":\"Address of product token contract.\"},\"rewardToken()\":{\"notice\":\"Address of reward token contract.\"},\"transferProductToken(address,uint256)\":{\"notice\":\"Transfer product token to recipient.\"},\"transferRewardToken(address,uint256)\":{\"notice\":\"Transfer reward token to recipient.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"withdraw(address)\":{\"notice\":\"Withdraw cumulative token to address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x92bf2cb99019349965d5a05c407edebcc8d02d75b8a663d8a6990024ccdea2c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./chainlink/CrossPriceFeed.sol\\\";\\n\\ncontract Market is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using CrossPriceFeed for address[];\\n\\n    uint8 public constant PRICE_DECIMALS = 6;\\n\\n    uint256 public constant REWARD_DECIMALS = 12;\\n\\n    /// @notice Address of cumulative token.\\n    ERC20 public cumulative;\\n\\n    /// @dev Addresses of cumulative token price feed chain.\\n    address[] internal cumulativePriceFeed;\\n\\n    /// @notice Address of product token contract.\\n    ERC20 public productToken;\\n\\n    /// @notice Address of reward token contract.\\n    ERC20 public rewardToken;\\n\\n    /// @dev Address of UniswapV2Router.\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    /// @dev Allowed tokens symbols list.\\n    mapping(address => address[]) internal allowedTokens;\\n\\n    /// @notice An event thats emitted when an uniswap router contract address changed.\\n    event UniswapRouterChanged(address newUniswapRouter);\\n\\n    /// @notice An event thats emitted when an cumulative token changed.\\n    event CumulativeChanged(address newToken, address[] priceFeed);\\n\\n    /// @notice An event thats emitted when an token allowed.\\n    event TokenAllowed(address token, address[] priceFeed);\\n\\n    /// @notice An event thats emitted when an token denied.\\n    event TokenDenied(address token);\\n\\n    /// @notice An event thats emitted when an account buyed token.\\n    event Buy(address customer, address token, uint256 amount, uint256 buy, uint256 reward);\\n\\n    /// @notice An event thats emitted when an cumulative token withdrawal.\\n    event Withdrawal(address recipient, address token, uint256 amount);\\n\\n    /**\\n     * @param _cumulative Address of cumulative token.\\n     * @param _productToken Address of product token.\\n     * @param _rewardToken Address of reward token.\\n     * @param _uniswapRouter Address of Uniswap router contract.\\n     * @param _cumulativePriceFeed Price feeds chain of cumulative token.\\n     */\\n    constructor(\\n        address _cumulative,\\n        address _productToken,\\n        address _rewardToken,\\n        address _uniswapRouter,\\n        address[] memory _cumulativePriceFeed\\n    ) public {\\n        cumulative = ERC20(_cumulative);\\n        cumulativePriceFeed = _cumulativePriceFeed;\\n        productToken = ERC20(_productToken);\\n        rewardToken = ERC20(_rewardToken);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @notice Changed uniswap router contract address.\\n     * @param _uniswapRouter Address new uniswap router contract.\\n     */\\n    function changeUniswapRouter(address _uniswapRouter) external onlyOwner {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        emit UniswapRouterChanged(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @notice Changed cumulative token address.\\n     * @param newToken Address new cumulative token.\\n     * @param newCumulativePriceFeed Address new price oracle contract.\\n     * @param recipient Address of recipient for withdraw current cumulative balance.\\n     */\\n    function changeCumulativeToken(\\n        address newToken,\\n        address[] memory newCumulativePriceFeed,\\n        address recipient\\n    ) external onlyOwner {\\n        withdraw(recipient);\\n        cumulative = ERC20(newToken);\\n        cumulativePriceFeed = newCumulativePriceFeed;\\n        emit CumulativeChanged(newToken, cumulativePriceFeed);\\n    }\\n\\n    /**\\n     * @notice Add token to tokens white list.\\n     * @param token Allowable token.\\n     * @param priceFeed Price feed chain.\\n     */\\n    function allowToken(address token, address[] memory priceFeed) external onlyOwner {\\n        allowedTokens[token] = priceFeed;\\n        emit TokenAllowed(token, priceFeed);\\n    }\\n\\n    /**\\n     * @notice Remove token from tokens white list.\\n     * @param token Denied token.\\n     */\\n    function denyToken(address token) external onlyOwner {\\n        allowedTokens[token] = new address[](0);\\n        emit TokenDenied(token);\\n    }\\n\\n    /**\\n     * @param token Target token.\\n     * @return Is target token allowed.\\n     */\\n    function isAllowedToken(address token) public view returns (bool) {\\n        return allowedTokens[token].length != 0;\\n    }\\n\\n    /**\\n     * @dev Transfer token to recipient.\\n     * @param from Address of transfered token contract.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transfer(\\n        ERC20 from,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(recipient != address(0), \\\"Market::transfer: cannot transfer to the zero address\\\");\\n\\n        uint256 currentBalance = from.balanceOf(address(this));\\n        require(amount <= currentBalance, \\\"Market::transfer: not enough tokens\\\");\\n\\n        from.safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer product token to recipient.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transferProductToken(address recipient, uint256 amount) external onlyOwner {\\n        transfer(productToken, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer reward token to recipient.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transferRewardToken(address recipient, uint256 amount) external onlyOwner {\\n        transfer(rewardToken, recipient, amount);\\n    }\\n\\n    /**\\n     * @param token Target token.\\n     * @return Price token at USD.\\n     */\\n    function _priceUSD(address token) public view returns (uint256) {\\n        address[] memory priceFeed = token == address(cumulative) ? cumulativePriceFeed : allowedTokens[token];\\n        int256 price = priceFeed.getAmountOut(int128(10)**PRICE_DECIMALS);\\n        if (price <= 0) return 0;\\n\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * @notice Get token price.\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return product Amount of product token.\\n     * @return reward Amount of reward token.\\n     */\\n    function price(address currency, uint256 payment) public view returns (uint256 product, uint256 reward) {\\n        require(isAllowedToken(currency), \\\"Market::price: currency not allowed\\\");\\n\\n        uint256 tokenDecimals = ERC20(currency).decimals();\\n        uint256 productDecimals = productToken.decimals();\\n        uint256 tokenPrice = _priceUSD(currency);\\n        uint256 cumulativePrice = _priceUSD(address(cumulative));\\n\\n        if (cumulativePrice != 0) {\\n            product = payment.mul(10**productDecimals.sub(tokenDecimals));\\n            if (address(productToken) != currency) {\\n                product = tokenPrice.mul(uint256(int128(10)**PRICE_DECIMALS)).div(cumulativePrice).mul(payment).div(uint256(int128(10)**PRICE_DECIMALS)).mul(10**productDecimals.sub(tokenDecimals));\\n            }\\n        }\\n\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        if (productTokenBalance > 0) {\\n            uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n            reward = product.mul(10**REWARD_DECIMALS).div(productTokenBalance).mul(rewardTokenBalance).div(10**REWARD_DECIMALS);\\n        }\\n    }\\n\\n    /**\\n     * @param currency Currency token.\\n     * @return Pools for each consecutive pair of addresses must exist and have liquidity\\n     */\\n    function _path(address currency) internal view returns (address[] memory) {\\n        address weth = uniswapRouter.WETH();\\n        if (weth == currency) {\\n            address[] memory path = new address[](2);\\n            path[0] = currency;\\n            path[1] = address(cumulative);\\n            return path;\\n        }\\n\\n        address[] memory path = new address[](3);\\n        path[0] = currency;\\n        path[1] = weth;\\n        path[2] = address(cumulative);\\n        return path;\\n    }\\n\\n    /**\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return Amount cumulative token after swap.\\n     */\\n    function _amountOut(address currency, uint256 payment) internal view returns (uint256) {\\n        uint256[] memory amountsOut = uniswapRouter.getAmountsOut(payment, _path(currency));\\n        require(amountsOut.length != 0, \\\"Market::_amountOut: invalid amounts out length\\\");\\n\\n        return amountsOut[amountsOut.length - 1];\\n    }\\n\\n    /**\\n     * @notice Buy token with ERC20.\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return True if success.\\n     */\\n    function buy(address currency, uint256 payment) external whenNotPaused returns (bool) {\\n        (uint256 product, uint256 reward) = price(currency, payment);\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        require(productTokenBalance > 0 && product <= productTokenBalance, \\\"Market::buy: exceeds balance\\\");\\n\\n        ERC20(currency).safeTransferFrom(_msgSender(), address(this), payment);\\n\\n        if (currency != address(cumulative)) {\\n            uint256 amountOut = _amountOut(currency, payment);\\n            require(amountOut != 0, \\\"Market::buy: liquidity pool is empty\\\");\\n\\n            ERC20(currency).safeApprove(address(uniswapRouter), 0);\\n            ERC20(currency).safeApprove(address(uniswapRouter), payment);\\n            uniswapRouter.swapExactTokensForTokens(payment, amountOut, _path(currency), address(this), block.timestamp);\\n        }\\n\\n        productToken.safeTransfer(_msgSender(), product);\\n        if (reward > 0) {\\n            rewardToken.safeTransfer(_msgSender(), reward);\\n        }\\n        emit Buy(_msgSender(), currency, payment, product, reward);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Buy token with ETH.\\n     * @return True if success.\\n     */\\n    function buyFromETH() external payable whenNotPaused returns (bool) {\\n        address currency = uniswapRouter.WETH();\\n        uint256 payment = msg.value;\\n\\n        (uint256 product, uint256 reward) = price(currency, payment);\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        require(product <= productTokenBalance, \\\"Market::buyFromETH: balance is empty\\\");\\n\\n        if (currency != address(cumulative)) {\\n            uint256 amountOut = _amountOut(currency, payment);\\n            require(amountOut != 0, \\\"Market::buyFromETH: liquidity pool is empty\\\");\\n\\n            uniswapRouter.swapExactETHForTokens{value: payment}(amountOut, _path(currency), address(this), block.timestamp);\\n        }\\n\\n        productToken.safeTransfer(_msgSender(), product);\\n        if (reward > 0) {\\n            rewardToken.safeTransfer(_msgSender(), reward);\\n        }\\n        emit Buy(_msgSender(), currency, payment, product, reward);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Withdraw cumulative token to address.\\n     * @param recipient Recipient of token.\\n     */\\n    function withdraw(address recipient) public onlyOwner {\\n        require(recipient != address(0), \\\"Market::withdraw: cannot transfer to the zero address\\\");\\n\\n        uint256 balance = cumulative.balanceOf(address(this));\\n        cumulative.safeTransfer(recipient, balance);\\n\\n        emit Withdrawal(recipient, address(cumulative), balance);\\n    }\\n}\\n\",\"keccak256\":\"0xf92cb488d3011f8e5ad1be1007bbd68e0fa4502bd92bc1d6ece01b05a4636eda\",\"license\":\"MIT\"},\"contracts/chainlink/CrossPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\n\\nlibrary CrossPriceFeed {\\n    using SignedSafeMath for int256;\\n\\n    /**\\n     * @param path Price feeds chain.\\n     * @param amountIn Input amount.\\n     * @return amounts Output amount of all price feeds.\\n     */\\n    function getAmountsOut(address[] memory path, int256 amountIn) internal view returns (int256[] memory amounts) {\\n        require(path.length > 0, \\\"ChainlinkCrossPriceFeed: invalid path\\\");\\n\\n        amounts = new int256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length; i++) {\\n            IPriceFeed priceFeed = IPriceFeed(path[i]);\\n            uint8 decimals = priceFeed.decimals();\\n            (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n            amounts[i + 1] = amounts[i].mul(price).div(int128(10)**decimals);\\n        }\\n    }\\n\\n    /**\\n     * @param path Price feeds chain.\\n     * @param amountIn Input amount.\\n     * @return Output amount of latest price feed.\\n     */\\n    function getAmountOut(address[] memory path, int256 amountIn) internal view returns (int256) {\\n        return getAmountsOut(path, amountIn)[path.length];\\n    }\\n}\\n\",\"keccak256\":\"0x72ba5807a99632df3cde70101be38fc495af5276292055ab3b43a28164db7db4\",\"license\":\"MIT\"},\"contracts/chainlink/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function version() external view returns (uint256);\\n}\",\"keccak256\":\"0x25a65cf46e0f6ebe9de9a0f12bf5f288479573ebe440199a6af8d7c42909e8db\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe82e348bfca27671354f43c6e0571e23f6d3257cb9221c3757995788cb524d37\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80638da5cb5b116100d1578063ca9f81ca1161008a578063f1a640f811610064578063f1a640f81461052a578063f2fde38b14610555578063f6a399e21461057e578063f7c618c1146105a757610181565b8063ca9f81ca14610487578063cbe230c3146104b0578063cce7ec13146104ed57610181565b80638da5cb5b146103765780639fd0506d146103a1578063ad9b8024146103cc578063adc3fa531461040a578063c337083714610435578063c5ea3d831461045e57610181565b80636b1cc4a81161013e5780637ae176ff116101185780637ae176ff146102ed5780637b3a3195146103185780637f171079146103365780638456cb591461035f57610181565b80636b1cc4a81461026e578063715018a6146102ab578063735de9f7146102c257610181565b806325b4f65f146101865780632cd271e7146101b15780633f4ba83a146101da57806351cff8d9146101f15780635ac267961461021a5780635c975abb14610243575b600080fd5b34801561019257600080fd5b5061019b6105d2565b6040516101a891906147a9565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d3919061393a565b6105f8565b005b3480156101e657600080fd5b506101ef61072a565b005b3480156101fd57600080fd5b506102186004803603810190610213919061393a565b61080f565b005b34801561022657600080fd5b50610241600480360381019061023c919061398c565b610a71565b005b34801561024f57600080fd5b50610258610b97565b604051610265919061478e565b60405180910390f35b34801561027a57600080fd5b506102956004803603810190610290919061393a565b610bad565b6040516102a29190614ae1565b60405180910390f35b3480156102b757600080fd5b506102c0610d16565b005b3480156102ce57600080fd5b506102d7610e69565b6040516102e491906147c4565b60405180910390f35b3480156102f957600080fd5b50610302610e8f565b60405161030f91906147a9565b60405180910390f35b610320610eb5565b60405161032d919061478e565b60405180910390f35b34801561034257600080fd5b5061035d600480360381019061035891906139e0565b611320565b005b34801561036b57600080fd5b50610374611455565b005b34801561038257600080fd5b5061038b61153a565b604051610398919061461c565b60405180910390f35b3480156103ad57600080fd5b506103b6611563565b6040516103c3919061461c565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190613a47565b611589565b604051610401929190614b78565b60405180910390f35b34801561041657600080fd5b5061041f611a19565b60405161042c9190614ae1565b60405180910390f35b34801561044157600080fd5b5061045c6004803603810190610457919061393a565b611a1e565b005b34801561046a57600080fd5b506104856004803603810190610480919061393a565b611b2e565b005b34801561049357600080fd5b506104ae60048036038101906104a99190613a47565b611c98565b005b3480156104bc57600080fd5b506104d760048036038101906104d2919061393a565b611d5e565b6040516104e4919061478e565b60405180910390f35b3480156104f957600080fd5b50610514600480360381019061050f9190613a47565b611dad565b604051610521919061478e565b60405180910390f35b34801561053657600080fd5b5061053f61224c565b60405161054c9190614bfb565b60405180910390f35b34801561056157600080fd5b5061057c6004803603810190610577919061393a565b612251565b005b34801561058a57600080fd5b506105a560048036038101906105a09190613a47565b612413565b005b3480156105b357600080fd5b506105bc6124d9565b6040516105c991906147a9565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106006124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490614961565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161071f919061461c565b60405180910390a150565b6107326124ff565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107c657506107906124ff565b73ffffffffffffffffffffffffffffffffffffffff166107ae61153a565b73ffffffffffffffffffffffffffffffffffffffff16145b610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906148a1565b60405180910390fd5b61080d612507565b565b6108176124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b90614961565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090b906149a1565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610971919061461c565b60206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190613aed565b9050610a108282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639882600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051610a65939291906146ce565b60405180910390a15050565b610a796124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90614961565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610b599291906136c7565b507f64c06b9281813567c8c8364b51b8f05ba5b1a88fc9826ecf48d4ab36acb5f78b8282604051610b8b929190614705565b60405180910390a15050565b60008060149054906101000a900460ff16905090565b60006060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c4a57600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610c4d565b60035b805480602002602001604051908101604052809291908181526020018280548015610ccd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c83575b505050505090506000610cf6600660ff16600a600f0b0a600f0b8361263690919063ffffffff16565b905060008113610d0b57600092505050610d11565b80925050505b919050565b610d1e6124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da290614961565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060149054906101000a900460ff1615610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd906148c1565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7057600080fd5b505afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190613963565b90506000349050600080610fbc8484611589565b915091506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101d919061461c565b60206040518083038186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106d9190613aed565b9050808311156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a990614a61565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461121d576000611113868661265e565b90506000811415611159576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611150906148e1565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab586836111a28a612784565b30426040518663ffffffff1660e01b81526004016111c39493929190614b2c565b6000604051808303818588803b1580156111dc57600080fd5b505af11580156111f0573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525081019061121a9190613a83565b50505b6112716112286124ff565b84600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b60008211156112cf576112ce6112856124ff565b83600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b5b7ef93dbdb72854b6b6fb35433086556f2635fc83c37080c667496fecfa650fb46112f76124ff565b8686868660405161130c959493929190614652565b60405180910390a160019550505050505090565b6113286124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90614961565b60405180910390fd5b6113be8161080f565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600390805190602001906114159291906136c7565b507f2f1e20302b538f039c0a30fd7751de4a0e0442e0c929d4750b3a662450e6095d836003604051611448929190614735565b60405180910390a1505050565b61145d6124ff565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806114f157506114bb6124ff565b73ffffffffffffffffffffffffffffffffffffffff166114d961153a565b73ffffffffffffffffffffffffffffffffffffffff16145b611530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152790614881565b60405180910390fd5b611538612ab7565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061159584611d5e565b6115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb90614841565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613b8d565b60ff1690506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c357600080fd5b505afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190613b8d565b60ff169050600061170b87610bad565b9050600061173a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bad565b9050600081146118515761176c61175a8585612b6290919063ffffffff16565b600a0a88612bac90919063ffffffff16565b95508773ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118505761184d6117d98585612b6290919063ffffffff16565b600a0a61183f600660ff16600a600f0b0a600f0b6118318b61182387611815600660ff16600a600f0b0a600f0b8b612bac90919063ffffffff16565b612c1c90919063ffffffff16565b612bac90919063ffffffff16565b612c1c90919063ffffffff16565b612bac90919063ffffffff16565b95505b5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118ae919061461c565b60206040518083038186803b1580156118c657600080fd5b505afa1580156118da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fe9190613aed565b90506000811115611a0d576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611966919061461c565b60206040518083038186803b15801561197e57600080fd5b505afa158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b69190613aed565b9050611a09600c600a0a6119fb836119ed866119df600c600a0a8f612bac90919063ffffffff16565b612c1c90919063ffffffff16565b612bac90919063ffffffff16565b612c1c90919063ffffffff16565b9650505b50505050509250929050565b600c81565b611a266124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aaa90614961565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0a3776494a324cdd72863deb1475d9eb705db96d66e7e199f3ebe4948343a43881604051611b23919061461c565b60405180910390a150565b611b366124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bba90614961565b60405180910390fd5b600067ffffffffffffffff81118015611bdb57600080fd5b50604051908082528060200260200182016040528015611c0a5781602001602082028036833780820191505090505b50600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611c5d9291906136c7565b507f99141d0e2d4f048b95e099fa59ce3343ad2b2827553ca03a066fdcbfc421dbb181604051611c8d919061461c565b60405180910390a150565b611ca06124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2490614961565b60405180910390fd5b611d5a600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383612c66565b5050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905014159050919050565b60008060149054906101000a900460ff1615611dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df5906148c1565b60405180910390fd5b600080611e0b8585611589565b915091506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e6c919061461c565b60206040518083038186803b158015611e8457600080fd5b505afa158015611e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebc9190613aed565b9050600081118015611ece5750808311155b611f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0490614a01565b60405180910390fd5b611f41611f186124ff565b30878973ffffffffffffffffffffffffffffffffffffffff16612dd7909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612148576000611fa2878761265e565b90506000811415611fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdf90614801565b60405180910390fd5b612036600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008973ffffffffffffffffffffffffffffffffffffffff16612e609092919063ffffffff16565b612083600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff16612e609092919063ffffffff16565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987836120cc8b612784565b30426040518663ffffffff1660e01b81526004016120ee959493929190614ba1565b600060405180830381600087803b15801561210857600080fd5b505af115801561211c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121459190613a83565b50505b61219c6121536124ff565b84600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b60008211156121fa576121f96121b06124ff565b83600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b5b7ef93dbdb72854b6b6fb35433086556f2635fc83c37080c667496fecfa650fb46122226124ff565b87878686604051612237959493929190614652565b60405180910390a16001935050505092915050565b600681565b6122596124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146122e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122dd90614961565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234d90614861565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61241b6124ff565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249f90614961565b60405180910390fd5b6124d5600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383612c66565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060149054906101000a900460ff16612556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254d90614821565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125996124ff565b6040516125a69190614637565b60405180910390a1565b6126318363a9059cbb60e01b84846040516024016125cf929190614765565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612fbe565b505050565b60006126428383613085565b83518151811061264e57fe5b6020026020010151905092915050565b60006060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f846126aa87612784565b6040518363ffffffff1660e01b81526004016126c7929190614afc565b60006040518083038186803b1580156126df57600080fd5b505afa1580156126f3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061271c9190613a83565b9050600081511415612763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275a90614941565b60405180910390fd5b8060018251038151811061277357fe5b602002602001015191505092915050565b60606000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f057600080fd5b505afa158015612804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128289190613963565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612966576060600267ffffffffffffffff8111801561287857600080fd5b506040519080825280602002602001820160405280156128a75781602001602082028036833780820191505090505b50905083816000815181106128b857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061292257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508092505050612ab2565b6060600367ffffffffffffffff8111801561298057600080fd5b506040519080825280602002602001820160405280156129af5781602001602082028036833780820191505090505b50905083816000815181106129c057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110612a0857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600281518110612a7257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080925050505b919050565b600060149054906101000a900460ff1615612b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afe906148c1565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b4b6124ff565b604051612b589190614637565b60405180910390a1565b6000612ba483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506132d4565b905092915050565b600080831415612bbf5760009050612c16565b6000828402905082848281612bd057fe5b0414612c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0890614921565b60405180910390fd5b809150505b92915050565b6000612c5e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061332f565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccd90614a21565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612d11919061461c565b60206040518083038186803b158015612d2957600080fd5b505afa158015612d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d619190613aed565b905080821115612da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9d90614aa1565b60405180910390fd5b612dd183838673ffffffffffffffffffffffffffffffffffffffff166125b09092919063ffffffff16565b50505050565b612e5a846323b872dd60e01b858585604051602401612df8939291906146ce565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612fbe565b50505050565b6000811480612ef9575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401612ea79291906146a5565b60206040518083038186803b158015612ebf57600080fd5b505afa158015612ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef79190613aed565b145b612f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2f90614ac1565b60405180910390fd5b612fb98363095ea7b360e01b8484604051602401612f57929190614765565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612fbe565b505050565b6060613020826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133909092919063ffffffff16565b905060008151111561308057808060200190518101906130409190613ac4565b61307f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161307690614a41565b60405180910390fd5b5b505050565b606060008351116130cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c2906149c1565b60405180910390fd5b600183510167ffffffffffffffff811180156130e657600080fd5b506040519080825280602002602001820160405280156131155781602001602082028036833780820191505090505b509050818160008151811061312657fe5b60200260200101818152505060005b83518110156132cd57600084828151811061314c57fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561319e57600080fd5b505afa1580156131b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d69190613b8d565b905060008273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561322057600080fd5b505afa158015613234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132589190613b16565b5050509150506132a28260ff16600a600f0b0a600f0b6132948388888151811061327e57fe5b60200260200101516133a890919063ffffffff16565b6134a690919063ffffffff16565b8560018601815181106132b157fe5b6020026020010181815250505050508080600101915050613135565b5092915050565b600083831115829061331c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331391906147df565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290613376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336d91906147df565b60405180910390fd5b50600083858161338257fe5b049050809150509392505050565b606061339f8484600085613591565b90509392505050565b6000808314156133bb57600090506134a0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8314801561340957507f800000000000000000000000000000000000000000000000000000000000000082145b15613449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344090614981565b60405180910390fd5b600082840290508284828161345a57fe5b051461349b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349290614981565b60405180910390fd5b809150505b92915050565b6000808214156134eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134e290614a81565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214801561353957507f800000000000000000000000000000000000000000000000000000000000000083145b15613579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161357090614901565b60405180910390fd5b600082848161358457fe5b0590508091505092915050565b606061359c856136b4565b6135db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135d2906149e1565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516136059190614605565b60006040518083038185875af1925050503d8060008114613642576040519150601f19603f3d011682016040523d82523d6000602084013e613647565b606091505b5091509150811561365c5780925050506136ac565b60008151111561366f5780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136a391906147df565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b828054828255906000526020600020908101928215613740579160200282015b8281111561373f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906136e7565b5b50905061374d9190613751565b5090565b5b8082111561378857600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613752565b5090565b60008135905061379b81614ebc565b92915050565b6000815190506137b081614ebc565b92915050565b600082601f8301126137c757600080fd5b81356137da6137d582614c43565b614c16565b915081818352602084019350602081019050838560208402820111156137ff57600080fd5b60005b8381101561382f5781613815888261378c565b845260208401935060208301925050600181019050613802565b5050505092915050565b600082601f83011261384a57600080fd5b815161385d61385882614c6b565b614c16565b9150818183526020840193506020810190508385602084028201111561388257600080fd5b60005b838110156138b2578161389888826138fb565b845260208401935060208301925050600181019050613885565b5050505092915050565b6000815190506138cb81614ed3565b92915050565b6000815190506138e081614eea565b92915050565b6000813590506138f581614f01565b92915050565b60008151905061390a81614f01565b92915050565b60008151905061391f81614f2f565b92915050565b60008151905061393481614f18565b92915050565b60006020828403121561394c57600080fd5b600061395a8482850161378c565b91505092915050565b60006020828403121561397557600080fd5b6000613983848285016137a1565b91505092915050565b6000806040838503121561399f57600080fd5b60006139ad8582860161378c565b925050602083013567ffffffffffffffff8111156139ca57600080fd5b6139d6858286016137b6565b9150509250929050565b6000806000606084860312156139f557600080fd5b6000613a038682870161378c565b935050602084013567ffffffffffffffff811115613a2057600080fd5b613a2c868287016137b6565b9250506040613a3d8682870161378c565b9150509250925092565b60008060408385031215613a5a57600080fd5b6000613a688582860161378c565b9250506020613a79858286016138e6565b9150509250929050565b600060208284031215613a9557600080fd5b600082015167ffffffffffffffff811115613aaf57600080fd5b613abb84828501613839565b91505092915050565b600060208284031215613ad657600080fd5b6000613ae4848285016138bc565b91505092915050565b600060208284031215613aff57600080fd5b6000613b0d848285016138fb565b91505092915050565b600080600080600060a08688031215613b2e57600080fd5b6000613b3c88828901613910565b9550506020613b4d888289016138d1565b9450506040613b5e888289016138fb565b9350506060613b6f888289016138fb565b9250506080613b8088828901613910565b9150509295509295909350565b600060208284031215613b9f57600080fd5b6000613bad84828501613925565b91505092915050565b6000613bc28383613bdd565b60208301905092915050565b613bd781614dc0565b82525050565b613be681614d4b565b82525050565b613bf581614d4b565b82525050565b6000613c0682614cb8565b613c108185614cfe565b9350613c1b83614c93565b8060005b83811015613c4c578151613c338882613bb6565b9750613c3e83614ce4565b925050600181019050613c1f565b5085935050505092915050565b6000613c6482614cc3565b613c6e8185614cfe565b9350613c7983614ca3565b8060005b83811015613cb157613c8e82614e8b565b613c988882613bb6565b9750613ca383614cf1565b925050600181019050613c7d565b5085935050505092915050565b613cc781614d5d565b82525050565b6000613cd882614cce565b613ce28185614d0f565b9350613cf2818560208601614e3e565b80840191505092915050565b613d0781614dd2565b82525050565b613d1681614df6565b82525050565b6000613d2782614cd9565b613d318185614d1a565b9350613d41818560208601614e3e565b613d4a81614e9e565b840191505092915050565b6000613d62602483614d1a565b91507f4d61726b65743a3a6275793a206c697175696469747920706f6f6c206973206560008301527f6d707479000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613dc8601483614d1a565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000613e08602383614d1a565b91507f4d61726b65743a3a70726963653a2063757272656e6379206e6f7420616c6c6f60008301527f77656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e6e602683614d1a565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ed4604183614d1a565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613f60604583614d1a565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613fec601083614d1a565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b600061402c602b83614d1a565b91507f4d61726b65743a3a62757946726f6d4554483a206c697175696469747920706f60008301527f6f6c20697320656d7074790000000000000000000000000000000000000000006020830152604082019050919050565b6000614092602183614d1a565b91507f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006140f8602183614d1a565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061415e602e83614d1a565b91507f4d61726b65743a3a5f616d6f756e744f75743a20696e76616c696420616d6f7560008301527f6e7473206f7574206c656e6774680000000000000000000000000000000000006020830152604082019050919050565b60006141c4602083614d1a565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614204602783614d1a565b91507f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f60008301527f766572666c6f77000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061426a603583614d1a565b91507f4d61726b65743a3a77697468647261773a2063616e6e6f74207472616e73666560008301527f7220746f20746865207a65726f206164647265737300000000000000000000006020830152604082019050919050565b60006142d0602583614d1a565b91507f436861696e6c696e6b43726f73735072696365466565643a20696e76616c696460008301527f20706174680000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614336601d83614d1a565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000614376601c83614d1a565b91507f4d61726b65743a3a6275793a20657863656564732062616c616e6365000000006000830152602082019050919050565b60006143b6603583614d1a565b91507f4d61726b65743a3a7472616e736665723a2063616e6e6f74207472616e73666560008301527f7220746f20746865207a65726f206164647265737300000000000000000000006020830152604082019050919050565b600061441c602a83614d1a565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000614482602483614d1a565b91507f4d61726b65743a3a62757946726f6d4554483a2062616c616e6365206973206560008301527f6d707479000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006144e8602083614d1a565b91507f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f6000830152602082019050919050565b6000614528602383614d1a565b91507f4d61726b65743a3a7472616e736665723a206e6f7420656e6f75676820746f6b60008301527f656e7300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061458e603683614d1a565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6145f081614d93565b82525050565b6145ff81614d9d565b82525050565b60006146118284613ccd565b915081905092915050565b60006020820190506146316000830184613bec565b92915050565b600060208201905061464c6000830184613bce565b92915050565b600060a0820190506146676000830188613bce565b6146746020830187613bec565b61468160408301866145e7565b61468e60608301856145e7565b61469b60808301846145e7565b9695505050505050565b60006040820190506146ba6000830185613bec565b6146c76020830184613bec565b9392505050565b60006060820190506146e36000830186613bec565b6146f06020830185613bec565b6146fd60408301846145e7565b949350505050565b600060408201905061471a6000830185613bec565b818103602083015261472c8184613bfb565b90509392505050565b600060408201905061474a6000830185613bec565b818103602083015261475c8184613c59565b90509392505050565b600060408201905061477a6000830185613bec565b61478760208301846145e7565b9392505050565b60006020820190506147a36000830184613cbe565b92915050565b60006020820190506147be6000830184613cfe565b92915050565b60006020820190506147d96000830184613d0d565b92915050565b600060208201905081810360008301526147f98184613d1c565b905092915050565b6000602082019050818103600083015261481a81613d55565b9050919050565b6000602082019050818103600083015261483a81613dbb565b9050919050565b6000602082019050818103600083015261485a81613dfb565b9050919050565b6000602082019050818103600083015261487a81613e61565b9050919050565b6000602082019050818103600083015261489a81613ec7565b9050919050565b600060208201905081810360008301526148ba81613f53565b9050919050565b600060208201905081810360008301526148da81613fdf565b9050919050565b600060208201905081810360008301526148fa8161401f565b9050919050565b6000602082019050818103600083015261491a81614085565b9050919050565b6000602082019050818103600083015261493a816140eb565b9050919050565b6000602082019050818103600083015261495a81614151565b9050919050565b6000602082019050818103600083015261497a816141b7565b9050919050565b6000602082019050818103600083015261499a816141f7565b9050919050565b600060208201905081810360008301526149ba8161425d565b9050919050565b600060208201905081810360008301526149da816142c3565b9050919050565b600060208201905081810360008301526149fa81614329565b9050919050565b60006020820190508181036000830152614a1a81614369565b9050919050565b60006020820190508181036000830152614a3a816143a9565b9050919050565b60006020820190508181036000830152614a5a8161440f565b9050919050565b60006020820190508181036000830152614a7a81614475565b9050919050565b60006020820190508181036000830152614a9a816144db565b9050919050565b60006020820190508181036000830152614aba8161451b565b9050919050565b60006020820190508181036000830152614ada81614581565b9050919050565b6000602082019050614af660008301846145e7565b92915050565b6000604082019050614b1160008301856145e7565b8181036020830152614b238184613bfb565b90509392505050565b6000608082019050614b4160008301876145e7565b8181036020830152614b538186613bfb565b9050614b626040830185613bec565b614b6f60608301846145e7565b95945050505050565b6000604082019050614b8d60008301856145e7565b614b9a60208301846145e7565b9392505050565b600060a082019050614bb660008301886145e7565b614bc360208301876145e7565b8181036040830152614bd58186613bfb565b9050614be46060830185613bec565b614bf160808301846145e7565b9695505050505050565b6000602082019050614c1060008301846145f6565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614c3957600080fd5b8060405250919050565b600067ffffffffffffffff821115614c5a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614c8257600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614d5682614d73565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b6000614dcb82614e1a565b9050919050565b6000614ddd82614de4565b9050919050565b6000614def82614d73565b9050919050565b6000614e0182614e08565b9050919050565b6000614e1382614d73565b9050919050565b6000614e2582614e2c565b9050919050565b6000614e3782614d73565b9050919050565b60005b83811015614e5c578082015181840152602081019050614e41565b83811115614e6b576000848401525b50505050565b6000614e84614e7f83614eaf565b614d2b565b9050919050565b6000614e978254614e71565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b614ec581614d4b565b8114614ed057600080fd5b50565b614edc81614d5d565b8114614ee757600080fd5b50565b614ef381614d69565b8114614efe57600080fd5b50565b614f0a81614d93565b8114614f1557600080fd5b50565b614f2181614d9d565b8114614f2c57600080fd5b50565b614f3881614daa565b8114614f4357600080fd5b5056fea26469706673582212205f6a56680304e4cbb24a191e72f31d13fb7c7407ed7b418f73b5d97f8725fcd964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_priceUSD(address)": {
        "params": {
          "token": "Target token."
        },
        "returns": {
          "_0": "Price token at USD."
        }
      },
      "allowToken(address,address[])": {
        "params": {
          "priceFeed": "Price feed chain.",
          "token": "Allowable token."
        }
      },
      "buy(address,uint256)": {
        "params": {
          "currency": "Currency token.",
          "payment": "Amount of payment."
        },
        "returns": {
          "_0": "True if success."
        }
      },
      "buyFromETH()": {
        "returns": {
          "_0": "True if success."
        }
      },
      "changeCumulativeToken(address,address[],address)": {
        "params": {
          "newCumulativePriceFeed": "Address new price oracle contract.",
          "newToken": "Address new cumulative token.",
          "recipient": "Address of recipient for withdraw current cumulative balance."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "changeUniswapRouter(address)": {
        "params": {
          "_uniswapRouter": "Address new uniswap router contract."
        }
      },
      "constructor": {
        "params": {
          "_cumulative": "Address of cumulative token.",
          "_cumulativePriceFeed": "Price feeds chain of cumulative token.",
          "_productToken": "Address of product token.",
          "_rewardToken": "Address of reward token.",
          "_uniswapRouter": "Address of Uniswap router contract."
        }
      },
      "denyToken(address)": {
        "params": {
          "token": "Denied token."
        }
      },
      "isAllowedToken(address)": {
        "params": {
          "token": "Target token."
        },
        "returns": {
          "_0": "Is target token allowed."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "price(address,uint256)": {
        "params": {
          "currency": "Currency token.",
          "payment": "Amount of payment."
        },
        "returns": {
          "product": "Amount of product token.",
          "reward": "Amount of reward token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferProductToken(address,uint256)": {
        "params": {
          "amount": "Amount of transfered token.",
          "recipient": "Address of recipient."
        }
      },
      "transferRewardToken(address,uint256)": {
        "params": {
          "amount": "Amount of transfered token.",
          "recipient": "Address of recipient."
        }
      },
      "withdraw(address)": {
        "params": {
          "recipient": "Recipient of token."
        }
      }
    },
    "stateVariables": {
      "allowedTokens": {
        "details": "Allowed tokens symbols list."
      },
      "cumulativePriceFeed": {
        "details": "Addresses of cumulative token price feed chain."
      },
      "uniswapRouter": {
        "details": "Address of UniswapV2Router."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Buy(address,address,uint256,uint256,uint256)": {
        "notice": "An event thats emitted when an account buyed token."
      },
      "CumulativeChanged(address,address[])": {
        "notice": "An event thats emitted when an cumulative token changed."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "TokenAllowed(address,address[])": {
        "notice": "An event thats emitted when an token allowed."
      },
      "TokenDenied(address)": {
        "notice": "An event thats emitted when an token denied."
      },
      "UniswapRouterChanged(address)": {
        "notice": "An event thats emitted when an uniswap router contract address changed."
      },
      "Withdrawal(address,address,uint256)": {
        "notice": "An event thats emitted when an cumulative token withdrawal."
      }
    },
    "kind": "user",
    "methods": {
      "allowToken(address,address[])": {
        "notice": "Add token to tokens white list."
      },
      "buy(address,uint256)": {
        "notice": "Buy token with ERC20."
      },
      "buyFromETH()": {
        "notice": "Buy token with ETH."
      },
      "changeCumulativeToken(address,address[],address)": {
        "notice": "Changed cumulative token address."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "changeUniswapRouter(address)": {
        "notice": "Changed uniswap router contract address."
      },
      "cumulative()": {
        "notice": "Address of cumulative token."
      },
      "denyToken(address)": {
        "notice": "Remove token from tokens white list."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "price(address,uint256)": {
        "notice": "Get token price."
      },
      "productToken()": {
        "notice": "Address of product token contract."
      },
      "rewardToken()": {
        "notice": "Address of reward token contract."
      },
      "transferProductToken(address,uint256)": {
        "notice": "Transfer product token to recipient."
      },
      "transferRewardToken(address,uint256)": {
        "notice": "Transfer reward token to recipient."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "withdraw(address)": {
        "notice": "Withdraw cumulative token to address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Market.sol:Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1985,
        "contract": "contracts/Market.sol:Market",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18352,
        "contract": "contracts/Market.sol:Market",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6356,
        "contract": "contracts/Market.sol:Market",
        "label": "cumulative",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)1086"
      },
      {
        "astId": 6360,
        "contract": "contracts/Market.sol:Market",
        "label": "cumulativePriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6363,
        "contract": "contracts/Market.sol:Market",
        "label": "productToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20)1086"
      },
      {
        "astId": 6366,
        "contract": "contracts/Market.sol:Market",
        "label": "rewardToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20)1086"
      },
      {
        "astId": 6369,
        "contract": "contracts/Market.sol:Market",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Router02)18197"
      },
      {
        "astId": 6375,
        "contract": "contracts/Market.sol:Market",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)1086": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)18197": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}
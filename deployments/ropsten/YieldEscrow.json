{
  "address": "0xD15d555Da70AA43b28afFc141aF49EfABCBbB2e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voteDelegator",
          "type": "address"
        }
      ],
      "name": "VoteDelegatorCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "VoteDelegatorDestroyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVoteDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFromDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroyVoteDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "voteDelegatorOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f2920961f3f282daaf76c79cc4f237bdb37b52d7794dc6ac6a490bfddd0e672",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xD15d555Da70AA43b28afFc141aF49EfABCBbB2e6",
    "transactionIndex": 1,
    "gasUsed": "4421385",
    "logsBloom": "0x
    "blockHash": "0xe543b2676ddf2411235eda1a977f741bd61c77201d11f38ed40884cc03cf2e67",
    "transactionHash": "0x4f2920961f3f282daaf76c79cc4f237bdb37b52d7794dc6ac6a490bfddd0e672",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10898672,
        "transactionHash": "0x4f2920961f3f282daaf76c79cc4f237bdb37b52d7794dc6ac6a490bfddd0e672",
        "address": "0xD15d555Da70AA43b28afFc141aF49EfABCBbB2e6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe543b2676ddf2411235eda1a977f741bd61c77201d11f38ed40884cc03cf2e67"
      }
    ],
    "blockNumber": 10898672,
    "cumulativeGasUsed": "4447974",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbFd30E0fC4F1c88E0dA4E32331771De329791699"
  ],
  "solcInputHash": "7d276f68ac2f691c14f011b68355d2f8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voteDelegator\",\"type\":\"address\"}],\"name\":\"VoteDelegatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VoteDelegatorDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVoteDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFromDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyVoteDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"voteDelegatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_governanceToken\":\"Governance token contract address.\"}},\"createVoteDelegator()\":{\"returns\":{\"_0\":\"Address of vote delegator.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"Deposit amount.\"}},\"depositFromDelegator(address,uint256)\":{\"params\":{\"account\":\"Target account.\",\"amount\":\"Deposit amount.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"voteDelegatorOf(address)\":{\"params\":{\"account\":\"Target account.\"},\"returns\":{\"_0\":\"Address of vote delegator (zero if not delegate).\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Withdraw amount.\"}},\"withdrawFromDelegator(address,uint256)\":{\"params\":{\"account\":\"Target account.\",\"amount\":\"Withdraw amount.\"}}},\"stateVariables\":{\"_voteDelegators\":{\"details\":\"Created vote delegators by account.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createVoteDelegator()\":{\"notice\":\"Create vote delegator contract for sender account.\"},\"deposit(uint256)\":{\"notice\":\"Deposit governance token.\"},\"depositFromDelegator(address,uint256)\":{\"notice\":\"Deposit governance token from vote delegator only.\"},\"destroyVoteDelegator()\":{\"notice\":\"Destroy vote delegator contract for sender account.\"},\"governanceToken()\":{\"notice\":\"Governance token contract.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw governance token.\"},\"withdrawFromDelegator(address,uint256)\":{\"notice\":\"Withdraw governance token from vote delegator only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldEscrow.sol\":\"YieldEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"contracts/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\ncontract GovernanceToken is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public name = \\\"BondAppetit Governance\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol = \\\"BAG\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public override totalSupply = 100000000e18; // 100 million tokens\\n\\n    /// @dev Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @dev Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice Amount of blocked token\\n    struct Lock {\\n        uint96 amount;\\n        uint256 date;\\n    }\\n\\n    /// @notice Locking amounts\\n    mapping(address => Lock) public locking;\\n\\n    /// @dev Locking amounts\\n    EnumerableSet.AddressSet internal lockingAllowed;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) public {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external override view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount) external override returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external override view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"GovernanceToken::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external override returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"GovernanceToken::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add account to transfer lock method allowed list\\n     * @param account Allowable account\\n     */\\n    function allowTransferLock(address account) external onlyOwner returns (bool) {\\n        return lockingAllowed.add(account);\\n    }\\n\\n    /**\\n     * @notice Remove account from transfer lock method allowed list\\n     * @param account Denied account\\n     */\\n    function denyTransferLock(address account) external onlyOwner returns (bool) {\\n        return lockingAllowed.remove(account);\\n    }\\n\\n    function transferLock(address dst, uint256 rawAmount, uint256 date) external returns (bool) {\\n        require(lockingAllowed.contains(msg.sender), \\\"GovernanceToken::transferLock: access is denied\\\");\\n        require(locking[dst].date == 0 || locking[dst].date == date, \\\"GovernanceToken::transferLock: lock date cannot be changed\\\");\\n        uint96 amount = safe96(rawAmount, \\\"GovernanceToken::transferLock: amount exceeds 96 bits\\\");\\n\\n        locking[dst].date = date;\\n        locking[dst].amount = add96(locking[dst].amount, amount, \\\"GovernanceToken::transferLock: transfer amount overflows\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     * \\n     * @param account Recipient of created token.\\n     * @param amount Amount of token to be created.\\n     */\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @param account Owner of removed token.\\n     * @param amount Amount of token to be removed.\\n     */\\n    function burn(address account, uint256 amount) public onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"GovernanceToken::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"GovernanceToken::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"GovernanceToken::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint96 amount\\n    ) internal {\\n        require(src != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"GovernanceToken::_transferTokens: transfer amount exceeds balance\\\");\\n        if (locking[src].date > block.timestamp && locking[src].amount > 0 && balances[src] < locking[src].amount) {\\n            revert(\\\"GovernanceToken::_transferTokens: amount are locked\\\");\\n        }\\n        balances[dst] = add96(balances[dst], amount, \\\"GovernanceToken::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 rawAmount) internal virtual {\\n        require(account != address(0), \\\"GovernanceToken::_mint: mint to the zero address\\\");\\n        uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_mint: amount exceeds 96 bits\\\");\\n\\n        totalSupply = totalSupply.add(rawAmount);\\n        balances[account] = add96(balances[account], amount, \\\"GovernanceToken::_mint: mint amount overflows\\\");\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 rawAmount) internal virtual {\\n        require(account != address(0), \\\"GovernanceToken::_burn: burn from the zero address\\\");\\n        uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_burn: amount exceeds 96 bits\\\");\\n\\n        balances[account] = sub96(balances[account], amount, \\\"GovernanceToken::_burn: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(rawAmount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x76a9ac2486c4c82dd7e63e94c62498f9dd5b345f6f1cdcf8eefe9f2ebf4719e9\",\"license\":\"MIT\"},\"contracts/VoteDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./YieldEscrow.sol\\\";\\nimport \\\"./GovernanceToken.sol\\\";\\n\\ncontract VoteDelegator is Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice Yield escrow contract address.\\n    address public yieldEscrow;\\n\\n    /**\\n     * @param _owner Owner account address.\\n     */\\n    constructor(address _owner) public {\\n        yieldEscrow = _msgSender();\\n        if (yieldEscrow != _owner) transferOwnership(_owner);\\n        GovernanceToken(governanceToken()).delegate(owner());\\n    }\\n\\n    /**\\n     * @notice Destroy contract and transfer governance token to voting escrow.\\n     */\\n    function destroy() external {\\n        require(_msgSender() == yieldEscrow, \\\"VoteDelegator::destroy: caller is not the voting escrow\\\");\\n\\n        ERC20 gov = ERC20(governanceToken());\\n        uint256 balance = gov.balanceOf(address(this));\\n        if (balance > 0) {\\n            gov.safeTransfer(yieldEscrow, balance);\\n        }\\n        selfdestruct(payable(owner()));\\n    }\\n\\n    /**\\n     * @return Governance token contract address.\\n     */\\n    function governanceToken() public view returns (address) {\\n        return YieldEscrow(yieldEscrow).governanceToken();\\n    }\\n\\n    /**\\n     * @notice Deposit governance token.\\n     * @param amount Deposit amount.\\n     */\\n    function deposit(uint256 amount) external onlyOwner {\\n        address account = owner();\\n        ERC20(governanceToken()).safeTransferFrom(account, address(this), amount);\\n        YieldEscrow(yieldEscrow).depositFromDelegator(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw governance token.\\n     * @param amount Withdraw amount.\\n     */\\n    function withdraw(uint256 amount) external onlyOwner {\\n        address account = owner();\\n        YieldEscrow(yieldEscrow).withdrawFromDelegator(account, amount);\\n        ERC20(governanceToken()).safeTransfer(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xee12a3a8b37624434a508baebaecabe564c09d35840d50606a616f671f253dde\",\"license\":\"MIT\"},\"contracts/YieldEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./VoteDelegator.sol\\\";\\n\\ncontract YieldEscrow is Ownable, ERC20 {\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice Governance token contract.\\n    address public governanceToken;\\n\\n    /// @dev Created vote delegators by account.\\n    mapping(address => address) internal _voteDelegators;\\n\\n    event VoteDelegatorCreated(address indexed account, address voteDelegator);\\n\\n    event VoteDelegatorDestroyed(address indexed account);\\n\\n    event Deposit(address indexed account, uint256 amount);\\n\\n    event Withdraw(address indexed account, uint256 amount);\\n\\n    /**\\n     * @param _governanceToken Governance token contract address.\\n     */\\n    constructor(address _governanceToken) public ERC20(\\\"BondAppetit Governance yield\\\", \\\"yBAG\\\") {\\n        governanceToken = _governanceToken;\\n    }\\n\\n    /**\\n     * @param account Target account.\\n     * @return Address of vote delegator (zero if not delegate).\\n     */\\n    function voteDelegatorOf(address account) public view returns (address) {\\n        return _voteDelegators[account];\\n    }\\n\\n    /**\\n     * @notice Create vote delegator contract for sender account.\\n     * @return Address of vote delegator.\\n     */\\n    function createVoteDelegator() external returns (address) {\\n        address account = _msgSender();\\n        require(voteDelegatorOf(account) == address(0), \\\"YieldEscrow::createVoteDelegator: votes delegator already created\\\");\\n\\n        _voteDelegators[account] = address(new VoteDelegator(account));\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            ERC20(governanceToken).safeTransfer(voteDelegatorOf(account), balance);\\n        }\\n        emit VoteDelegatorCreated(account, voteDelegatorOf(account));\\n\\n        return voteDelegatorOf(account);\\n    }\\n\\n    /**\\n     * @notice Destroy vote delegator contract for sender account.\\n     */\\n    function destroyVoteDelegator() external {\\n        address account = _msgSender();\\n        address voteDelegator = voteDelegatorOf(account);\\n        require(voteDelegator != address(0), \\\"VotinEscrow::destroyVoteDelegator: votes delegator already destroyed\\\");\\n\\n        _voteDelegators[account] = address(0);\\n        VoteDelegator(voteDelegator).destroy();\\n        emit VoteDelegatorDestroyed(account);\\n    }\\n\\n    /**\\n     * @notice Deposit governance token.\\n     * @param amount Deposit amount.\\n     */\\n    function deposit(uint256 amount) external {\\n        require(amount > 0, \\\"YieldEscrow::deposit: negative or zero amount\\\");\\n        address account = _msgSender();\\n        require(voteDelegatorOf(account) == address(0), \\\"YieldEscrow::deposit: vote delegator only deposit for this account\\\");\\n\\n        ERC20(governanceToken).safeTransferFrom(account, address(this), amount);\\n        _mint(account, amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit governance token from vote delegator only.\\n     * @param account Target account.\\n     * @param amount Deposit amount.\\n     */\\n    function depositFromDelegator(address account, uint256 amount) external {\\n        require(amount > 0, \\\"YieldEscrow::depositFromDelegator: negative or zero amount\\\");\\n        require(_msgSender() == voteDelegatorOf(account), \\\"YieldEscrow::depositFromDelegator: caller is not a vote delegator\\\");\\n\\n        _mint(account, amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw governance token.\\n     * @param amount Withdraw amount.\\n     */\\n    function withdraw(uint256 amount) external {\\n        require(amount > 0, \\\"YieldEscrow::withdraw: negative or zero amount\\\");\\n        address account = _msgSender();\\n        require(voteDelegatorOf(account) == address(0), \\\"YieldEscrow::withdraw: vote delegator only deposit for this account\\\");\\n\\n        _burn(account, amount);\\n        ERC20(governanceToken).safeTransfer(account, amount);\\n        emit Withdraw(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw governance token from vote delegator only.\\n     * @param account Target account.\\n     * @param amount Withdraw amount.\\n     */\\n    function withdrawFromDelegator(address account, uint256 amount) external {\\n        require(amount > 0, \\\"YieldEscrow::withdrawFromDelegator: negative or zero amount\\\");\\n        address voteDelegator = voteDelegatorOf(account);\\n        require(_msgSender() == voteDelegator, \\\"YieldEscrow::withdrawFromDelegator: caller is not a vote delegator\\\");\\n\\n        _burn(account, amount);\\n        emit Withdraw(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc4b9992b3bca788f5cc60262f5e9f82bf7cc07c86319bdd855ca0806e872dc47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620050d4380380620050d48339818101604052810190620000379190620002b0565b6040518060400160405280601c81526020017f426f6e644170706574697420476f7665726e616e6365207969656c64000000008152506040518060400160405280600481526020017f79424147000000000000000000000000000000000000000000000000000000008152506000620000b5620001eb60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600490805190602001906200016b929190620001f3565b50806005908051906020019062000184929190620001f3565b506012600660006101000a81548160ff021916908360ff160217905550505080600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200032a565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023657805160ff191683800117855562000267565b8280016001018555821562000267579182015b828111156200026657825182559160200191906001019062000249565b5b5090506200027691906200027a565b5090565b5b80821115620002955760008160009055506001016200027b565b5090565b600081519050620002aa8162000310565b92915050565b600060208284031215620002c357600080fd5b6000620002d38482850162000299565b91505092915050565b6000620002e982620002f0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200031b81620002dc565b81146200032757600080fd5b50565b614d9a806200033a6000396000f3fe60806040523480156200001157600080fd5b5060043610620001605760003560e01c80638da5cb5b11620000c9578063b969b1331162000087578063b969b13314620003cb578063c3b37ced14620003ed578063dd62ed3e1462000423578063ece22aea1462000459578063f2fde38b1462000479578063f96dae0a14620004995762000160565b80638da5cb5b14620002fb57806395d89b41146200031d578063a457c2d7146200033f578063a9059cbb1462000375578063b6b55f2514620003ab5762000160565b806323b872dd116200012357806323b872dd146200020b5780632e1a7d4d1462000241578063313ce567146200026157806339509351146200028357806370a0823114620002b9578063715018a614620002ef5762000160565b806306fdde0314620001655780630849681114620001875780630909646f14620001a7578063095ea7b314620001b357806318160ddd14620001e9575b600080fd5b6200016f620004bb565b6040516200017e919062002ee4565b60405180910390f35b620001a560048036038101906200019f9190620023fe565b62000561565b005b620001b16200068b565b005b620001d16004803603810190620001cb9190620023fe565b62000843565b604051620001e0919062002ec7565b60405180910390f35b620001f362000865565b604051620002029190620031d2565b60405180910390f35b620002296004803603810190620002239190620023a8565b6200086f565b60405162000238919062002ec7565b60405180910390f35b6200025f60048036038101906200025991906200246b565b62000953565b005b6200026b62000ad2565b6040516200027a9190620031ef565b60405180910390f35b620002a160048036038101906200029b9190620023fe565b62000ae9565b604051620002b0919062002ec7565b60405180910390f35b620002d76004803603810190620002d191906200233b565b62000ba4565b604051620002e69190620031d2565b60405180910390f35b620002f962000bed565b005b6200030562000d45565b60405162000314919062002e40565b60405180910390f35b6200032762000d6e565b60405162000336919062002ee4565b60405180910390f35b6200035d6004803603810190620003579190620023fe565b62000e14565b6040516200036c919062002ec7565b60405180910390f35b6200039360048036038101906200038d9190620023fe565b62000eea565b604051620003a2919062002ec7565b60405180910390f35b620003c96004803603810190620003c391906200246b565b62000f0c565b005b620003d56200108d565b604051620003e4919062002e40565b60405180910390f35b6200040b60048036038101906200040591906200233b565b620012ad565b6040516200041a919062002e40565b60405180910390f35b6200044160048036038101906200043b919062002367565b62001316565b604051620004509190620031d2565b60405180910390f35b620004776004803603810190620004719190620023fe565b6200139d565b005b6200049760048036038101906200049191906200233b565b620014cd565b005b620004a362001697565b604051620004b2919062002e40565b60405180910390f35b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620005575780601f106200052b5761010080835404028352916020019162000557565b820191906000526020600020905b8154815290600101906020018083116200053957829003601f168201915b5050505050905090565b60008111620005a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200059e9062003018565b60405180910390fd5b620005b282620012ad565b73ffffffffffffffffffffffffffffffffffffffff16620005d2620016bd565b73ffffffffffffffffffffffffffffffffffffffff16146200062b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200062290620030e4565b60405180910390fd5b620006378282620016c5565b8173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516200067f9190620031d2565b60405180910390a25050565b600062000697620016bd565b90506000620006a682620012ad565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000712906200318e565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620007e357600080fd5b505af1158015620007f8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f1105c1accb711f6e16a267a359e86ab74b3ebf35a3b24b073f0b11b54ee098ee60405160405180910390a25050565b60006200085b62000853620016bd565b848462001866565b6001905092915050565b6000600354905090565b60006200087e84848462001a39565b62000948846200088d620016bd565b620009428560405180606001604052806028815260200162004d1860289139600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000620008f7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b62001866565b600190509392505050565b6000811162000999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000990906200303a565b60405180910390fd5b6000620009a5620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff16620009ca82620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462000a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a1a9062002ff6565b60405180910390fd5b62000a2f818362001d3f565b62000a7e8183600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001efb9092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405162000ac69190620031d2565b60405180910390a25050565b6000600660009054906101000a900460ff16905090565b600062000b9a62000af9620016bd565b8462000b94856002600062000b0d620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b62001866565b6001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b62000bf7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c7e906200305c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000e0a5780601f1062000dde5761010080835404028352916020019162000e0a565b820191906000526020600020905b81548152906001019060200180831162000dec57829003601f168201915b5050505050905090565b600062000ee062000e24620016bd565b8462000eda8560405180606001604052806025815260200162004d40602591396002600062000e52620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b62001866565b6001905092915050565b600062000f0262000efa620016bd565b848462001a39565b6001905092915050565b6000811162000f52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f49906200314a565b60405180910390fd5b600062000f5e620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff1662000f8382620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462000fdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fd39062002fd4565b60405180910390fd5b6200102d813084600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001fdd909392919063ffffffff16565b620010398183620016c5565b8073ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051620010819190620031d2565b60405180910390a25050565b6000806200109a620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff16620010bf82620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462001118576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200110f9062002f90565b60405180910390fd5b806040516200112790620022e8565b62001133919062002e40565b604051809103906000f08015801562001150573d6000803e3d6000fd5b50600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000620011db8262000ba4565b90506000811115620012415762001240620011f683620012ad565b82600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001efb9092919063ffffffff16565b5b8173ffffffffffffffffffffffffffffffffffffffff167fbccb0938bf9a575bef0dea7816ffa1fba073bc3ffded5cc065991c4580de02c76200128484620012ad565b60405162001293919062002e40565b60405180910390a2620012a682620012ad565b9250505090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008111620013e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013da9062002fb2565b60405180910390fd5b6000620013f083620012ad565b90508073ffffffffffffffffffffffffffffffffffffffff1662001413620016bd565b73ffffffffffffffffffffffffffffffffffffffff16146200146c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001463906200307e565b60405180910390fd5b62001478838362001d3f565b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051620014c09190620031d2565b60405180910390a2505050565b620014d7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462001567576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200155e906200305c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620015da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015d19062002f2a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001738576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200172f90620031b0565b60405180910390fd5b62001746600083836200206a565b6200175d8160035462001f8590919063ffffffff16565b600381905550620017b781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200185a9190620031d2565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620018d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018d09062003106565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200194c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019439062002f4c565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405162001a2c9190620031d2565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562001aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001aa390620030c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b169062002f08565b60405180910390fd5b62001b2c8383836200206a565b62001b9b8160405180606001604052806026815260200162004cf260269139600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062001c3281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162001cd49190620031d2565b60405180910390a3505050565b600083831115829062001d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d23919062002ee4565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001da990620030a0565b60405180910390fd5b62001dc0826000836200206a565b62001e2f8160405180606001604052806022815260200162004cd060229139600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062001e89816003546200206f90919063ffffffff16565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162001eef9190620031d2565b60405180910390a35050565b62001f808363a9059cbb60e01b848460405160240162001f1d92919062002e9a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620020bb565b505050565b60008082840190508381101562001fd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fca9062002f6e565b60405180910390fd5b8091505092915050565b62002064846323b872dd60e01b858585604051602401620020019392919062002e5d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620020bb565b50505050565b505050565b6000620020b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062001ce1565b905092915050565b60606200211f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200218a9092919063ffffffff16565b90506000815111156200218557808060200190518101906200214291906200243f565b62002184576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200217b906200316c565b60405180910390fd5b5b505050565b60606200219b8484600085620021a4565b90509392505050565b6060620021b185620022d5565b620021f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021ea9062003128565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516200221f919062002e27565b60006040518083038185875af1925050503d80600081146200225e576040519150601f19603f3d011682016040523d82523d6000602084013e62002263565b606091505b509150915081156200227a578092505050620022cd565b6000815111156200228e5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620022c4919062002ee4565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b6119a5806200332b83390190565b6000813590506200230781620032dc565b92915050565b6000815190506200231e81620032f6565b92915050565b600081359050620023358162003310565b92915050565b6000602082840312156200234e57600080fd5b60006200235e84828501620022f6565b91505092915050565b600080604083850312156200237b57600080fd5b60006200238b85828601620022f6565b92505060206200239e85828601620022f6565b9150509250929050565b600080600060608486031215620023be57600080fd5b6000620023ce86828701620022f6565b9350506020620023e186828701620022f6565b9250506040620023f48682870162002324565b9150509250925092565b600080604083850312156200241257600080fd5b60006200242285828601620022f6565b9250506020620024358582860162002324565b9150509250929050565b6000602082840312156200245257600080fd5b600062002462848285016200230d565b91505092915050565b6000602082840312156200247e57600080fd5b60006200248e8482850162002324565b91505092915050565b620024a2816200323e565b82525050565b620024b38162003252565b82525050565b6000620024c6826200320c565b620024d2818562003222565b9350620024e481856020860162003295565b80840191505092915050565b6000620024fd8262003217565b6200250981856200322d565b93506200251b81856020860162003295565b6200252681620032cb565b840191505092915050565b6000620025406023836200322d565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620025a86026836200322d565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620026106022836200322d565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002678601b836200322d565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000620026ba6041836200322d565b91507f5969656c64457363726f773a3a637265617465566f746544656c656761746f7260008301527f3a20766f7465732064656c656761746f7220616c72656164792063726561746560208301527f64000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002748603b836200322d565b91507f5969656c64457363726f773a3a776974686472617746726f6d44656c6567617460008301527f6f723a206e65676174697665206f72207a65726f20616d6f756e7400000000006020830152604082019050919050565b6000620027b06042836200322d565b91507f5969656c64457363726f773a3a6465706f7369743a20766f74652064656c656760008301527f61746f72206f6e6c79206465706f73697420666f722074686973206163636f7560208301527f6e740000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006200283e6043836200322d565b91507f5969656c64457363726f773a3a77697468647261773a20766f74652064656c6560008301527f6761746f72206f6e6c79206465706f73697420666f722074686973206163636f60208301527f756e7400000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000620028cc603a836200322d565b91507f5969656c64457363726f773a3a6465706f73697446726f6d44656c656761746f60008301527f723a206e65676174697665206f72207a65726f20616d6f756e740000000000006020830152604082019050919050565b600062002934602e836200322d565b91507f5969656c64457363726f773a3a77697468647261773a206e656761746976652060008301527f6f72207a65726f20616d6f756e740000000000000000000000000000000000006020830152604082019050919050565b60006200299c6020836200322d565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000620029de6042836200322d565b91507f5969656c64457363726f773a3a776974686472617746726f6d44656c6567617460008301527f6f723a2063616c6c6572206973206e6f74206120766f74652064656c6567617460208301527f6f720000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002a6c6021836200322d565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002ad46025836200322d565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002b3c6041836200322d565b91507f5969656c64457363726f773a3a6465706f73697446726f6d44656c656761746f60008301527f723a2063616c6c6572206973206e6f74206120766f74652064656c656761746f60208301527f72000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002bca6024836200322d565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002c32601d836200322d565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600062002c74602d836200322d565b91507f5969656c64457363726f773a3a6465706f7369743a206e65676174697665206f60008301527f72207a65726f20616d6f756e74000000000000000000000000000000000000006020830152604082019050919050565b600062002cdc602a836200322d565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600062002d446044836200322d565b91507f566f74696e457363726f773a3a64657374726f79566f746544656c656761746f60008301527f723a20766f7465732064656c656761746f7220616c726561647920646573747260208301527f6f796564000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002dd2601f836200322d565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b62002e10816200327e565b82525050565b62002e218162003288565b82525050565b600062002e358284620024b9565b915081905092915050565b600060208201905062002e57600083018462002497565b92915050565b600060608201905062002e74600083018662002497565b62002e83602083018562002497565b62002e92604083018462002e05565b949350505050565b600060408201905062002eb1600083018562002497565b62002ec0602083018462002e05565b9392505050565b600060208201905062002ede6000830184620024a8565b92915050565b6000602082019050818103600083015262002f008184620024f0565b905092915050565b6000602082019050818103600083015262002f238162002531565b9050919050565b6000602082019050818103600083015262002f458162002599565b9050919050565b6000602082019050818103600083015262002f678162002601565b9050919050565b6000602082019050818103600083015262002f898162002669565b9050919050565b6000602082019050818103600083015262002fab81620026ab565b9050919050565b6000602082019050818103600083015262002fcd8162002739565b9050919050565b6000602082019050818103600083015262002fef81620027a1565b9050919050565b6000602082019050818103600083015262003011816200282f565b9050919050565b600060208201905081810360008301526200303381620028bd565b9050919050565b60006020820190508181036000830152620030558162002925565b9050919050565b6000602082019050818103600083015262003077816200298d565b9050919050565b600060208201905081810360008301526200309981620029cf565b9050919050565b60006020820190508181036000830152620030bb8162002a5d565b9050919050565b60006020820190508181036000830152620030dd8162002ac5565b9050919050565b60006020820190508181036000830152620030ff8162002b2d565b9050919050565b60006020820190508181036000830152620031218162002bbb565b9050919050565b60006020820190508181036000830152620031438162002c23565b9050919050565b60006020820190508181036000830152620031658162002c65565b9050919050565b60006020820190508181036000830152620031878162002ccd565b9050919050565b60006020820190508181036000830152620031a98162002d35565b9050919050565b60006020820190508181036000830152620031cb8162002dc3565b9050919050565b6000602082019050620031e9600083018462002e05565b92915050565b600060208201905062003206600083018462002e16565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006200324b826200325e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015620032b557808201518184015260208101905062003298565b83811115620032c5576000848401525b50505050565b6000601f19601f8301169050919050565b620032e7816200323e565b8114620032f357600080fd5b50565b620033018162003252565b81146200330d57600080fd5b50565b6200331b816200327e565b81146200332757600080fd5b5056fe60806040523480156200001157600080fd5b50604051620019a5380380620019a58339818101604052810190620000379190620004f6565b6000620000496200023360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000f76200023360201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200019f576200019e816200023b60201b60201c565b5b620001af6200040b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16635c19a95c620001da620004b660201b60201c565b6040518263ffffffff1660e01b8152600401620001f89190620005dd565b600060405180830381600087803b1580156200021357600080fd5b505af115801562000228573d6000803e3d6000fd5b50505050506200069d565b600033905090565b6200024b6200023360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620002db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d2906200061c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200034e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034590620005fa565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200047657600080fd5b505afa1580156200048b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b19190620004f6565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620004f08162000683565b92915050565b6000602082840312156200050957600080fd5b60006200051984828501620004df565b91505092915050565b6200052d816200064f565b82525050565b6000620005426026836200063e565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620005aa6020836200063e565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000602082019050620005f4600083018462000522565b92915050565b60006020820190508181036000830152620006158162000533565b9050919050565b6000602082019050818103600083015262000637816200059b565b9050919050565b600082825260208201905092915050565b60006200065c8262000663565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200068e816200064f565b81146200069a57600080fd5b50565b6112f880620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db578063b6b55f25146100f9578063f2fde38b14610115578063f96dae0a1461013157610088565b80632e1a7d4d1461008d57806353e589ac146100a9578063715018a6146100c757806383197ef0146100d1575b600080fd5b6100a760048036038101906100a29190610ddf565b61014f565b005b6100b16102b5565b6040516100be9190611082565b60405180910390f35b6100cf6102db565b005b6100d961042e565b005b6100e36105d5565b6040516100f09190611082565b60405180910390f35b610113600480360381019061010e9190610ddf565b6105fe565b005b61012f600480360381019061012a9190610d64565b610766565b005b610139610928565b6040516101469190611082565b60405180910390f35b6101576109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101db9061113f565b60405180910390fd5b60006101ee6105d5565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ece22aea82846040518363ffffffff1660e01b815260040161024d9291906110d4565b600060405180830381600087803b15801561026757600080fd5b505af115801561027b573d6000803e3d6000fd5b505050506102b1818361028c610928565b73ffffffffffffffffffffffffffffffffffffffff166109d79092919063ffffffff16565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102e36109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103679061113f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661046f6109cf565b73ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc9061117f565b60405180910390fd5b60006104cf610928565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161050c9190611082565b60206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190610e08565b905060008111156105b5576105b4600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166109d79092919063ffffffff16565b5b6105bd6105d5565b73ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106066109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a9061113f565b60405180910390fd5b600061069d6105d5565b90506106d38130846106ad610928565b73ffffffffffffffffffffffffffffffffffffffff16610a5d909392919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630849681182846040518363ffffffff1660e01b81526004016107309291906110d4565b600060405180830381600087803b15801561074a57600080fd5b505af115801561075e573d6000803e3d6000fd5b505050505050565b61076e6109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f29061113f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108629061111f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190610d8d565b905090565b600033905090565b610a588363a9059cbb60e01b84846040516024016109f69291906110d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ae6565b505050565b610ae0846323b872dd60e01b858585604051602401610a7e9392919061109d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ae6565b50505050565b6060610b48826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bad9092919063ffffffff16565b9050600081511115610ba85780806020019051810190610b689190610db6565b610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e9061119f565b60405180910390fd5b5b505050565b6060610bbc8484600085610bc5565b90509392505050565b6060610bd085610ce8565b610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c069061115f565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610c39919061106b565b60006040518083038185875af1925050503d8060008114610c76576040519150601f19603f3d011682016040523d82523d6000602084013e610c7b565b606091505b50915091508115610c90578092505050610ce0565b600081511115610ca35780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd791906110fd565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050610d0a8161127d565b92915050565b600081519050610d1f8161127d565b92915050565b600081519050610d3481611294565b92915050565b600081359050610d49816112ab565b92915050565b600081519050610d5e816112ab565b92915050565b600060208284031215610d7657600080fd5b6000610d8484828501610cfb565b91505092915050565b600060208284031215610d9f57600080fd5b6000610dad84828501610d10565b91505092915050565b600060208284031215610dc857600080fd5b6000610dd684828501610d25565b91505092915050565b600060208284031215610df157600080fd5b6000610dff84828501610d3a565b91505092915050565b600060208284031215610e1a57600080fd5b6000610e2884828501610d4f565b91505092915050565b610e3a816111f1565b82525050565b6000610e4b826111bf565b610e5581856111d5565b9350610e65818560208601611239565b80840191505092915050565b6000610e7c826111ca565b610e8681856111e0565b9350610e96818560208601611239565b610e9f8161126c565b840191505092915050565b6000610eb76026836111e0565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610f1d6020836111e0565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000610f5d601d836111e0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000610f9d6037836111e0565b91507f566f746544656c656761746f723a3a64657374726f793a2063616c6c6572206960008301527f73206e6f742074686520766f74696e6720657363726f770000000000000000006020830152604082019050919050565b6000611003602a836111e0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6110658161122f565b82525050565b60006110778284610e40565b915081905092915050565b60006020820190506110976000830184610e31565b92915050565b60006060820190506110b26000830186610e31565b6110bf6020830185610e31565b6110cc604083018461105c565b949350505050565b60006040820190506110e96000830185610e31565b6110f6602083018461105c565b9392505050565b600060208201905081810360008301526111178184610e71565b905092915050565b6000602082019050818103600083015261113881610eaa565b9050919050565b6000602082019050818103600083015261115881610f10565b9050919050565b6000602082019050818103600083015261117881610f50565b9050919050565b6000602082019050818103600083015261119881610f90565b9050919050565b600060208201905081810360008301526111b881610ff6565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006111fc8261120f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561125757808201518184015260208101905061123c565b83811115611266576000848401525b50505050565b6000601f19601f8301169050919050565b611286816111f1565b811461129157600080fd5b50565b61129d81611203565b81146112a857600080fd5b50565b6112b48161122f565b81146112bf57600080fd5b5056fea2646970667358221220b7bff4d2568da72ea894970ded19127b4da390c65f21f7cb100ce35dce3d6af264736f6c634300060c003345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220666562e40bc17f20db430253e35d44a784acd28b4654b43a03742ec55617026264736f6c634300060c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001605760003560e01c80638da5cb5b11620000c9578063b969b1331162000087578063b969b13314620003cb578063c3b37ced14620003ed578063dd62ed3e1462000423578063ece22aea1462000459578063f2fde38b1462000479578063f96dae0a14620004995762000160565b80638da5cb5b14620002fb57806395d89b41146200031d578063a457c2d7146200033f578063a9059cbb1462000375578063b6b55f2514620003ab5762000160565b806323b872dd116200012357806323b872dd146200020b5780632e1a7d4d1462000241578063313ce567146200026157806339509351146200028357806370a0823114620002b9578063715018a614620002ef5762000160565b806306fdde0314620001655780630849681114620001875780630909646f14620001a7578063095ea7b314620001b357806318160ddd14620001e9575b600080fd5b6200016f620004bb565b6040516200017e919062002ee4565b60405180910390f35b620001a560048036038101906200019f9190620023fe565b62000561565b005b620001b16200068b565b005b620001d16004803603810190620001cb9190620023fe565b62000843565b604051620001e0919062002ec7565b60405180910390f35b620001f362000865565b604051620002029190620031d2565b60405180910390f35b620002296004803603810190620002239190620023a8565b6200086f565b60405162000238919062002ec7565b60405180910390f35b6200025f60048036038101906200025991906200246b565b62000953565b005b6200026b62000ad2565b6040516200027a9190620031ef565b60405180910390f35b620002a160048036038101906200029b9190620023fe565b62000ae9565b604051620002b0919062002ec7565b60405180910390f35b620002d76004803603810190620002d191906200233b565b62000ba4565b604051620002e69190620031d2565b60405180910390f35b620002f962000bed565b005b6200030562000d45565b60405162000314919062002e40565b60405180910390f35b6200032762000d6e565b60405162000336919062002ee4565b60405180910390f35b6200035d6004803603810190620003579190620023fe565b62000e14565b6040516200036c919062002ec7565b60405180910390f35b6200039360048036038101906200038d9190620023fe565b62000eea565b604051620003a2919062002ec7565b60405180910390f35b620003c96004803603810190620003c391906200246b565b62000f0c565b005b620003d56200108d565b604051620003e4919062002e40565b60405180910390f35b6200040b60048036038101906200040591906200233b565b620012ad565b6040516200041a919062002e40565b60405180910390f35b6200044160048036038101906200043b919062002367565b62001316565b604051620004509190620031d2565b60405180910390f35b620004776004803603810190620004719190620023fe565b6200139d565b005b6200049760048036038101906200049191906200233b565b620014cd565b005b620004a362001697565b604051620004b2919062002e40565b60405180910390f35b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620005575780601f106200052b5761010080835404028352916020019162000557565b820191906000526020600020905b8154815290600101906020018083116200053957829003601f168201915b5050505050905090565b60008111620005a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200059e9062003018565b60405180910390fd5b620005b282620012ad565b73ffffffffffffffffffffffffffffffffffffffff16620005d2620016bd565b73ffffffffffffffffffffffffffffffffffffffff16146200062b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200062290620030e4565b60405180910390fd5b620006378282620016c5565b8173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516200067f9190620031d2565b60405180910390a25050565b600062000697620016bd565b90506000620006a682620012ad565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000712906200318e565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620007e357600080fd5b505af1158015620007f8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f1105c1accb711f6e16a267a359e86ab74b3ebf35a3b24b073f0b11b54ee098ee60405160405180910390a25050565b60006200085b62000853620016bd565b848462001866565b6001905092915050565b6000600354905090565b60006200087e84848462001a39565b62000948846200088d620016bd565b620009428560405180606001604052806028815260200162004d1860289139600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000620008f7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b62001866565b600190509392505050565b6000811162000999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000990906200303a565b60405180910390fd5b6000620009a5620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff16620009ca82620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462000a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a1a9062002ff6565b60405180910390fd5b62000a2f818362001d3f565b62000a7e8183600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001efb9092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405162000ac69190620031d2565b60405180910390a25050565b6000600660009054906101000a900460ff16905090565b600062000b9a62000af9620016bd565b8462000b94856002600062000b0d620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b62001866565b6001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b62000bf7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c7e906200305c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000e0a5780601f1062000dde5761010080835404028352916020019162000e0a565b820191906000526020600020905b81548152906001019060200180831162000dec57829003601f168201915b5050505050905090565b600062000ee062000e24620016bd565b8462000eda8560405180606001604052806025815260200162004d40602591396002600062000e52620016bd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b62001866565b6001905092915050565b600062000f0262000efa620016bd565b848462001a39565b6001905092915050565b6000811162000f52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f49906200314a565b60405180910390fd5b600062000f5e620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff1662000f8382620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462000fdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fd39062002fd4565b60405180910390fd5b6200102d813084600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001fdd909392919063ffffffff16565b620010398183620016c5565b8073ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051620010819190620031d2565b60405180910390a25050565b6000806200109a620016bd565b9050600073ffffffffffffffffffffffffffffffffffffffff16620010bf82620012ad565b73ffffffffffffffffffffffffffffffffffffffff161462001118576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200110f9062002f90565b60405180910390fd5b806040516200112790620022e8565b62001133919062002e40565b604051809103906000f08015801562001150573d6000803e3d6000fd5b50600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000620011db8262000ba4565b90506000811115620012415762001240620011f683620012ad565b82600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662001efb9092919063ffffffff16565b5b8173ffffffffffffffffffffffffffffffffffffffff167fbccb0938bf9a575bef0dea7816ffa1fba073bc3ffded5cc065991c4580de02c76200128484620012ad565b60405162001293919062002e40565b60405180910390a2620012a682620012ad565b9250505090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008111620013e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013da9062002fb2565b60405180910390fd5b6000620013f083620012ad565b90508073ffffffffffffffffffffffffffffffffffffffff1662001413620016bd565b73ffffffffffffffffffffffffffffffffffffffff16146200146c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001463906200307e565b60405180910390fd5b62001478838362001d3f565b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051620014c09190620031d2565b60405180910390a2505050565b620014d7620016bd565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462001567576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200155e906200305c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620015da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015d19062002f2a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001738576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200172f90620031b0565b60405180910390fd5b62001746600083836200206a565b6200175d8160035462001f8590919063ffffffff16565b600381905550620017b781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200185a9190620031d2565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620018d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018d09062003106565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200194c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019439062002f4c565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405162001a2c9190620031d2565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562001aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001aa390620030c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b169062002f08565b60405180910390fd5b62001b2c8383836200206a565b62001b9b8160405180606001604052806026815260200162004cf260269139600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062001c3281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001f8590919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162001cd49190620031d2565b60405180910390a3505050565b600083831115829062001d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d23919062002ee4565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001da990620030a0565b60405180910390fd5b62001dc0826000836200206a565b62001e2f8160405180606001604052806022815260200162004cd060229139600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462001ce19092919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062001e89816003546200206f90919063ffffffff16565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162001eef9190620031d2565b60405180910390a35050565b62001f808363a9059cbb60e01b848460405160240162001f1d92919062002e9a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620020bb565b505050565b60008082840190508381101562001fd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fca9062002f6e565b60405180910390fd5b8091505092915050565b62002064846323b872dd60e01b858585604051602401620020019392919062002e5d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620020bb565b50505050565b505050565b6000620020b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062001ce1565b905092915050565b60606200211f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200218a9092919063ffffffff16565b90506000815111156200218557808060200190518101906200214291906200243f565b62002184576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200217b906200316c565b60405180910390fd5b5b505050565b60606200219b8484600085620021a4565b90509392505050565b6060620021b185620022d5565b620021f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021ea9062003128565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516200221f919062002e27565b60006040518083038185875af1925050503d80600081146200225e576040519150601f19603f3d011682016040523d82523d6000602084013e62002263565b606091505b509150915081156200227a578092505050620022cd565b6000815111156200228e5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620022c4919062002ee4565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b6119a5806200332b83390190565b6000813590506200230781620032dc565b92915050565b6000815190506200231e81620032f6565b92915050565b600081359050620023358162003310565b92915050565b6000602082840312156200234e57600080fd5b60006200235e84828501620022f6565b91505092915050565b600080604083850312156200237b57600080fd5b60006200238b85828601620022f6565b92505060206200239e85828601620022f6565b9150509250929050565b600080600060608486031215620023be57600080fd5b6000620023ce86828701620022f6565b9350506020620023e186828701620022f6565b9250506040620023f48682870162002324565b9150509250925092565b600080604083850312156200241257600080fd5b60006200242285828601620022f6565b9250506020620024358582860162002324565b9150509250929050565b6000602082840312156200245257600080fd5b600062002462848285016200230d565b91505092915050565b6000602082840312156200247e57600080fd5b60006200248e8482850162002324565b91505092915050565b620024a2816200323e565b82525050565b620024b38162003252565b82525050565b6000620024c6826200320c565b620024d2818562003222565b9350620024e481856020860162003295565b80840191505092915050565b6000620024fd8262003217565b6200250981856200322d565b93506200251b81856020860162003295565b6200252681620032cb565b840191505092915050565b6000620025406023836200322d565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620025a86026836200322d565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620026106022836200322d565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002678601b836200322d565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000620026ba6041836200322d565b91507f5969656c64457363726f773a3a637265617465566f746544656c656761746f7260008301527f3a20766f7465732064656c656761746f7220616c72656164792063726561746560208301527f64000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002748603b836200322d565b91507f5969656c64457363726f773a3a776974686472617746726f6d44656c6567617460008301527f6f723a206e65676174697665206f72207a65726f20616d6f756e7400000000006020830152604082019050919050565b6000620027b06042836200322d565b91507f5969656c64457363726f773a3a6465706f7369743a20766f74652064656c656760008301527f61746f72206f6e6c79206465706f73697420666f722074686973206163636f7560208301527f6e740000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006200283e6043836200322d565b91507f5969656c64457363726f773a3a77697468647261773a20766f74652064656c6560008301527f6761746f72206f6e6c79206465706f73697420666f722074686973206163636f60208301527f756e7400000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000620028cc603a836200322d565b91507f5969656c64457363726f773a3a6465706f73697446726f6d44656c656761746f60008301527f723a206e65676174697665206f72207a65726f20616d6f756e740000000000006020830152604082019050919050565b600062002934602e836200322d565b91507f5969656c64457363726f773a3a77697468647261773a206e656761746976652060008301527f6f72207a65726f20616d6f756e740000000000000000000000000000000000006020830152604082019050919050565b60006200299c6020836200322d565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000620029de6042836200322d565b91507f5969656c64457363726f773a3a776974686472617746726f6d44656c6567617460008301527f6f723a2063616c6c6572206973206e6f74206120766f74652064656c6567617460208301527f6f720000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002a6c6021836200322d565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002ad46025836200322d565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002b3c6041836200322d565b91507f5969656c64457363726f773a3a6465706f73697446726f6d44656c656761746f60008301527f723a2063616c6c6572206973206e6f74206120766f74652064656c656761746f60208301527f72000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002bca6024836200322d565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062002c32601d836200322d565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600062002c74602d836200322d565b91507f5969656c64457363726f773a3a6465706f7369743a206e65676174697665206f60008301527f72207a65726f20616d6f756e74000000000000000000000000000000000000006020830152604082019050919050565b600062002cdc602a836200322d565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600062002d446044836200322d565b91507f566f74696e457363726f773a3a64657374726f79566f746544656c656761746f60008301527f723a20766f7465732064656c656761746f7220616c726561647920646573747260208301527f6f796564000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600062002dd2601f836200322d565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b62002e10816200327e565b82525050565b62002e218162003288565b82525050565b600062002e358284620024b9565b915081905092915050565b600060208201905062002e57600083018462002497565b92915050565b600060608201905062002e74600083018662002497565b62002e83602083018562002497565b62002e92604083018462002e05565b949350505050565b600060408201905062002eb1600083018562002497565b62002ec0602083018462002e05565b9392505050565b600060208201905062002ede6000830184620024a8565b92915050565b6000602082019050818103600083015262002f008184620024f0565b905092915050565b6000602082019050818103600083015262002f238162002531565b9050919050565b6000602082019050818103600083015262002f458162002599565b9050919050565b6000602082019050818103600083015262002f678162002601565b9050919050565b6000602082019050818103600083015262002f898162002669565b9050919050565b6000602082019050818103600083015262002fab81620026ab565b9050919050565b6000602082019050818103600083015262002fcd8162002739565b9050919050565b6000602082019050818103600083015262002fef81620027a1565b9050919050565b6000602082019050818103600083015262003011816200282f565b9050919050565b600060208201905081810360008301526200303381620028bd565b9050919050565b60006020820190508181036000830152620030558162002925565b9050919050565b6000602082019050818103600083015262003077816200298d565b9050919050565b600060208201905081810360008301526200309981620029cf565b9050919050565b60006020820190508181036000830152620030bb8162002a5d565b9050919050565b60006020820190508181036000830152620030dd8162002ac5565b9050919050565b60006020820190508181036000830152620030ff8162002b2d565b9050919050565b60006020820190508181036000830152620031218162002bbb565b9050919050565b60006020820190508181036000830152620031438162002c23565b9050919050565b60006020820190508181036000830152620031658162002c65565b9050919050565b60006020820190508181036000830152620031878162002ccd565b9050919050565b60006020820190508181036000830152620031a98162002d35565b9050919050565b60006020820190508181036000830152620031cb8162002dc3565b9050919050565b6000602082019050620031e9600083018462002e05565b92915050565b600060208201905062003206600083018462002e16565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006200324b826200325e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015620032b557808201518184015260208101905062003298565b83811115620032c5576000848401525b50505050565b6000601f19601f8301169050919050565b620032e7816200323e565b8114620032f357600080fd5b50565b620033018162003252565b81146200330d57600080fd5b50565b6200331b816200327e565b81146200332757600080fd5b5056fe60806040523480156200001157600080fd5b50604051620019a5380380620019a58339818101604052810190620000379190620004f6565b6000620000496200023360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000f76200023360201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200019f576200019e816200023b60201b60201c565b5b620001af6200040b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16635c19a95c620001da620004b660201b60201c565b6040518263ffffffff1660e01b8152600401620001f89190620005dd565b600060405180830381600087803b1580156200021357600080fd5b505af115801562000228573d6000803e3d6000fd5b50505050506200069d565b600033905090565b6200024b6200023360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620002db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d2906200061c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200034e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034590620005fa565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200047657600080fd5b505afa1580156200048b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b19190620004f6565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620004f08162000683565b92915050565b6000602082840312156200050957600080fd5b60006200051984828501620004df565b91505092915050565b6200052d816200064f565b82525050565b6000620005426026836200063e565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620005aa6020836200063e565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000602082019050620005f4600083018462000522565b92915050565b60006020820190508181036000830152620006158162000533565b9050919050565b6000602082019050818103600083015262000637816200059b565b9050919050565b600082825260208201905092915050565b60006200065c8262000663565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200068e816200064f565b81146200069a57600080fd5b50565b6112f880620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db578063b6b55f25146100f9578063f2fde38b14610115578063f96dae0a1461013157610088565b80632e1a7d4d1461008d57806353e589ac146100a9578063715018a6146100c757806383197ef0146100d1575b600080fd5b6100a760048036038101906100a29190610ddf565b61014f565b005b6100b16102b5565b6040516100be9190611082565b60405180910390f35b6100cf6102db565b005b6100d961042e565b005b6100e36105d5565b6040516100f09190611082565b60405180910390f35b610113600480360381019061010e9190610ddf565b6105fe565b005b61012f600480360381019061012a9190610d64565b610766565b005b610139610928565b6040516101469190611082565b60405180910390f35b6101576109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101db9061113f565b60405180910390fd5b60006101ee6105d5565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ece22aea82846040518363ffffffff1660e01b815260040161024d9291906110d4565b600060405180830381600087803b15801561026757600080fd5b505af115801561027b573d6000803e3d6000fd5b505050506102b1818361028c610928565b73ffffffffffffffffffffffffffffffffffffffff166109d79092919063ffffffff16565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102e36109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103679061113f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661046f6109cf565b73ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc9061117f565b60405180910390fd5b60006104cf610928565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161050c9190611082565b60206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190610e08565b905060008111156105b5576105b4600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166109d79092919063ffffffff16565b5b6105bd6105d5565b73ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106066109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a9061113f565b60405180910390fd5b600061069d6105d5565b90506106d38130846106ad610928565b73ffffffffffffffffffffffffffffffffffffffff16610a5d909392919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630849681182846040518363ffffffff1660e01b81526004016107309291906110d4565b600060405180830381600087803b15801561074a57600080fd5b505af115801561075e573d6000803e3d6000fd5b505050505050565b61076e6109cf565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f29061113f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108629061111f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96dae0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190610d8d565b905090565b600033905090565b610a588363a9059cbb60e01b84846040516024016109f69291906110d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ae6565b505050565b610ae0846323b872dd60e01b858585604051602401610a7e9392919061109d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ae6565b50505050565b6060610b48826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bad9092919063ffffffff16565b9050600081511115610ba85780806020019051810190610b689190610db6565b610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e9061119f565b60405180910390fd5b5b505050565b6060610bbc8484600085610bc5565b90509392505050565b6060610bd085610ce8565b610c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c069061115f565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610c39919061106b565b60006040518083038185875af1925050503d8060008114610c76576040519150601f19603f3d011682016040523d82523d6000602084013e610c7b565b606091505b50915091508115610c90578092505050610ce0565b600081511115610ca35780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd791906110fd565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050610d0a8161127d565b92915050565b600081519050610d1f8161127d565b92915050565b600081519050610d3481611294565b92915050565b600081359050610d49816112ab565b92915050565b600081519050610d5e816112ab565b92915050565b600060208284031215610d7657600080fd5b6000610d8484828501610cfb565b91505092915050565b600060208284031215610d9f57600080fd5b6000610dad84828501610d10565b91505092915050565b600060208284031215610dc857600080fd5b6000610dd684828501610d25565b91505092915050565b600060208284031215610df157600080fd5b6000610dff84828501610d3a565b91505092915050565b600060208284031215610e1a57600080fd5b6000610e2884828501610d4f565b91505092915050565b610e3a816111f1565b82525050565b6000610e4b826111bf565b610e5581856111d5565b9350610e65818560208601611239565b80840191505092915050565b6000610e7c826111ca565b610e8681856111e0565b9350610e96818560208601611239565b610e9f8161126c565b840191505092915050565b6000610eb76026836111e0565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610f1d6020836111e0565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000610f5d601d836111e0565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000610f9d6037836111e0565b91507f566f746544656c656761746f723a3a64657374726f793a2063616c6c6572206960008301527f73206e6f742074686520766f74696e6720657363726f770000000000000000006020830152604082019050919050565b6000611003602a836111e0565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6110658161122f565b82525050565b60006110778284610e40565b915081905092915050565b60006020820190506110976000830184610e31565b92915050565b60006060820190506110b26000830186610e31565b6110bf6020830185610e31565b6110cc604083018461105c565b949350505050565b60006040820190506110e96000830185610e31565b6110f6602083018461105c565b9392505050565b600060208201905081810360008301526111178184610e71565b905092915050565b6000602082019050818103600083015261113881610eaa565b9050919050565b6000602082019050818103600083015261115881610f10565b9050919050565b6000602082019050818103600083015261117881610f50565b9050919050565b6000602082019050818103600083015261119881610f90565b9050919050565b600060208201905081810360008301526111b881610ff6565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006111fc8261120f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561125757808201518184015260208101905061123c565b83811115611266576000848401525b50505050565b6000601f19601f8301169050919050565b611286816111f1565b811461129157600080fd5b50565b61129d81611203565b81146112a857600080fd5b50565b6112b48161122f565b81146112bf57600080fd5b5056fea2646970667358221220b7bff4d2568da72ea894970ded19127b4da390c65f21f7cb100ce35dce3d6af264736f6c634300060c003345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220666562e40bc17f20db430253e35d44a784acd28b4654b43a03742ec55617026264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_governanceToken": "Governance token contract address."
        }
      },
      "createVoteDelegator()": {
        "returns": {
          "_0": "Address of vote delegator."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Deposit amount."
        }
      },
      "depositFromDelegator(address,uint256)": {
        "params": {
          "account": "Target account.",
          "amount": "Deposit amount."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "voteDelegatorOf(address)": {
        "params": {
          "account": "Target account."
        },
        "returns": {
          "_0": "Address of vote delegator (zero if not delegate)."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Withdraw amount."
        }
      },
      "withdrawFromDelegator(address,uint256)": {
        "params": {
          "account": "Target account.",
          "amount": "Withdraw amount."
        }
      }
    },
    "stateVariables": {
      "_voteDelegators": {
        "details": "Created vote delegators by account."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createVoteDelegator()": {
        "notice": "Create vote delegator contract for sender account."
      },
      "deposit(uint256)": {
        "notice": "Deposit governance token."
      },
      "depositFromDelegator(address,uint256)": {
        "notice": "Deposit governance token from vote delegator only."
      },
      "destroyVoteDelegator()": {
        "notice": "Destroy vote delegator contract for sender account."
      },
      "governanceToken()": {
        "notice": "Governance token contract."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw governance token."
      },
      "withdrawFromDelegator(address,uint256)": {
        "notice": "Withdraw governance token from vote delegator only."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 600,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 606,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 608,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 610,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 612,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 614,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_decimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 10567,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "governanceToken",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10572,
        "contract": "contracts/YieldEscrow.sol:YieldEscrow",
        "label": "_voteDelegators",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xE2e1a471D6D91288a839565aF045d7992a8AD630",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingEndBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unstakingStartBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRewardsDistribution",
          "type": "address"
        }
      ],
      "name": "RewardsDistributionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "StakingEndBlockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "UnstakingStartBlockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "changeRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEndBlock",
          "type": "uint256"
        }
      ],
      "name": "changeStakingEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakingStartBlock",
          "type": "uint256"
        }
      ],
      "name": "changeUnstakingStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakingStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a791424a4e308454645b30f07b4abc1fb88b233bcd73538acbef86241e76a93",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xE2e1a471D6D91288a839565aF045d7992a8AD630",
    "transactionIndex": 15,
    "gasUsed": "2989110",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000001000002000000000000000000000000000000020000000000000000000800000800000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000100000000000",
    "blockHash": "0x71593aab0eefd5bd09900142d733528f75471106ba84da551dee53f610e1e2f8",
    "transactionHash": "0x9a791424a4e308454645b30f07b4abc1fb88b233bcd73538acbef86241e76a93",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 10912619,
        "transactionHash": "0x9a791424a4e308454645b30f07b4abc1fb88b233bcd73538acbef86241e76a93",
        "address": "0xE2e1a471D6D91288a839565aF045d7992a8AD630",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x71593aab0eefd5bd09900142d733528f75471106ba84da551dee53f610e1e2f8"
      }
    ],
    "blockNumber": 10912619,
    "cumulativeGasUsed": "4317834",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    161280,
    "0x14481Ad39F43B901cd022F3b86A0851c69cD88ba",
    "0x14481Ad39F43B901cd022F3b86A0851c69cD88ba",
    0,
    0
  ],
  "solcInputHash": "70c372195ba0e618f15d362b71bbc694",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingStartBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardsDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBlockNumber\",\"type\":\"uint256\"}],\"name\":\"StakingEndBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBlockNumber\",\"type\":\"uint256\"}],\"name\":\"UnstakingStartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"changeRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEndBlock\",\"type\":\"uint256\"}],\"name\":\"changeStakingEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingStartBlock\",\"type\":\"uint256\"}],\"name\":\"changeUnstakingStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\"Target account.\"},\"returns\":{\"_0\":\"Staking token amount.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"changeRewardsDistribution(address)\":{\"params\":{\"_rewardDistribution\":\"New rewards distribution address.\"}},\"changeStakingEndBlock(uint256)\":{\"params\":{\"_stakingEndBlock\":\"New staking end block number.\"}},\"changeUnstakingStartBlock(uint256)\":{\"params\":{\"_unstakingStartBlock\":\"New unstaking start block number.\"}},\"constructor\":{\"params\":{\"_rewardsDistribution\":\"Rewards distribution address.\",\"_rewardsDuration\":\"Duration of distribution.\",\"_rewardsToken\":\"Address of reward token.\",\"_stakingToken\":\"Address of staking token.\"}},\"earned(address)\":{\"params\":{\"account\":\"Target account.\"},\"returns\":{\"_0\":\"Earned rewards.\"}},\"getRewardForDuration()\":{\"returns\":{\"_0\":\"Rewards amount for duration.\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"Block number of last reward.\"}},\"notifyRewardAmount(uint256)\":{\"params\":{\"reward\":\"Distributed rewards amount.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardPerToken()\":{\"returns\":{\"_0\":\"Reward per token.\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount staking token.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"Total staking token amount.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"Amount transfered rewards token.\",\"recipient\":\"Recipient.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount withdraw token.\"}}},\"stateVariables\":{\"_balances\":{\"details\":\"Staking balances.\"},\"_totalSupply\":{\"details\":\"Total staking token amount.\"}},\"version\":1},\"userdoc\":{\"events\":{\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"RewardAdded(uint256)\":{\"notice\":\"An event thats emitted when an reward token addet to contract.\"},\"RewardPaid(address,uint256)\":{\"notice\":\"An event thats emitted when an reward token withdrawal from contract.\"},\"RewardsDistributionChanged(address)\":{\"notice\":\"An event thats emitted when an rewards distribution address changed.\"},\"RewardsTransfered(address,uint256)\":{\"notice\":\"An event thats emitted when an rewards tokens transfered to recipient.\"},\"Staked(address,uint256)\":{\"notice\":\"An event thats emitted when an staking token added to contract.\"},\"StakingEndBlockChanged(uint256)\":{\"notice\":\"An event thats emitted when an staking end block number changed.\"},\"UnstakingStartBlockChanged(uint256)\":{\"notice\":\"An event thats emitted when an unstaking start block number changed.\"},\"Withdrawn(address,uint256)\":{\"notice\":\"An event thats emitted when an staking token withdrawal from contract.\"}},\"kind\":\"user\",\"methods\":{\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"changeRewardsDistribution(address)\":{\"notice\":\"Change rewards distribution address.\"},\"changeStakingEndBlock(uint256)\":{\"notice\":\"Change staking end block number.\"},\"changeUnstakingStartBlock(uint256)\":{\"notice\":\"Change unstaking start block number.\"},\"exit()\":{\"notice\":\"Withdraw reward and staking token.\"},\"getReward()\":{\"notice\":\"Withdraw reward token.\"},\"lastUpdateBlock()\":{\"notice\":\"Block number of last update.\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Start distribution.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"periodFinish()\":{\"notice\":\"Block number of rewards distibution period finish.\"},\"rewardPerTokenStored()\":{\"notice\":\"Static reward distribution amount per block.\"},\"rewardRate()\":{\"notice\":\"Reward distribution amount per block.\"},\"rewards(address)\":{\"notice\":\"Earned rewards.\"},\"rewardsDistribution()\":{\"notice\":\"Address of rewards distributor.\"},\"rewardsDuration()\":{\"notice\":\"Blocks count in current distribution period.\"},\"rewardsToken()\":{\"notice\":\"Rewards token address.\"},\"stake(uint256)\":{\"notice\":\"Stake token.\"},\"stakingEndBlock()\":{\"notice\":\"Staking completion block number.\"},\"stakingToken()\":{\"notice\":\"Staking token address.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer rewards token to recipient if distribution not start.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"unstakingStartBlock()\":{\"notice\":\"Unstaking start block number.\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Rewards paid.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staking token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Staking is OwnablePausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of rewards distributor.\\n    address public rewardsDistribution;\\n\\n    /// @notice Rewards token address.\\n    IERC20 public rewardsToken;\\n\\n    /// @notice Staking token address.\\n    IERC20 public stakingToken;\\n\\n    /// @notice Block number of rewards distibution period finish.\\n    uint256 public periodFinish;\\n\\n    /// @notice Reward distribution amount per block.\\n    uint256 public rewardRate;\\n\\n    /// @notice Blocks count in current distribution period.\\n    uint256 public rewardsDuration;\\n\\n    /// @notice Block number of last update.\\n    uint256 public lastUpdateBlock;\\n\\n    /// @notice Static reward distribution amount per block.\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice Staking completion block number.\\n    uint256 public stakingEndBlock;\\n\\n    /// @notice Unstaking start block number.\\n    uint256 public unstakingStartBlock;\\n\\n    /// @notice Rewards paid.\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// @notice Earned rewards.\\n    mapping(address => uint256) public rewards;\\n\\n    /// @dev Total staking token amount.\\n    uint256 internal _totalSupply;\\n\\n    /// @dev Staking balances.\\n    mapping(address => uint256) internal _balances;\\n\\n    /// @notice An event thats emitted when an reward token addet to contract.\\n    event RewardAdded(uint256 reward);\\n\\n    /// @notice An event thats emitted when an staking token added to contract.\\n    event Staked(address indexed user, uint256 amount);\\n\\n    /// @notice An event thats emitted when an staking token withdrawal from contract.\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    /// @notice An event thats emitted when an reward token withdrawal from contract.\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    /// @notice An event thats emitted when an rewards distribution address changed.\\n    event RewardsDistributionChanged(address newRewardsDistribution);\\n\\n    /// @notice An event thats emitted when an rewards tokens transfered to recipient.\\n    event RewardsTransfered(address recipient, uint256 amount);\\n\\n    /// @notice An event thats emitted when an staking end block number changed.\\n    event StakingEndBlockChanged(uint256 newBlockNumber);\\n\\n    /// @notice An event thats emitted when an unstaking start block number changed.\\n    event UnstakingStartBlockChanged(uint256 newBlockNumber);\\n\\n    /**\\n     * @param _rewardsDistribution Rewards distribution address.\\n     * @param _rewardsDuration Duration of distribution.\\n     * @param _rewardsToken Address of reward token.\\n     * @param _stakingToken Address of staking token.\\n     */\\n    constructor(\\n        address _rewardsDistribution,\\n        uint256 _rewardsDuration,\\n        address _rewardsToken,\\n        address _stakingToken,\\n        uint256 _stakingEndBlock,\\n        uint256 _unstakingStartBlock\\n    ) public {\\n        rewardsDistribution = _rewardsDistribution;\\n        rewardsDuration = _rewardsDuration;\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        stakingEndBlock = _stakingEndBlock;\\n        unstakingStartBlock = _unstakingStartBlock;\\n    }\\n\\n    /**\\n     * @notice Update target account rewards state.\\n     * @param account Target account.\\n     */\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateBlock = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @return Total staking token amount.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @param account Target account.\\n     * @return Staking token amount.\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @return Block number of last reward.\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.number, periodFinish);\\n    }\\n\\n    /**\\n     * @return Reward per token.\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return rewardPerTokenStored.add(lastTimeRewardApplicable().sub(lastUpdateBlock).mul(rewardRate).mul(1e18).div(_totalSupply));\\n    }\\n\\n    /**\\n     * @param account Target account.\\n     * @return Earned rewards.\\n     */\\n    function earned(address account) public view returns (uint256) {\\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\\n    }\\n\\n    /**\\n     * @return Rewards amount for duration.\\n     */\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    /**\\n     * @notice Stake token.\\n     * @param amount Amount staking token.\\n     */\\n    function stake(uint256 amount) external nonReentrant updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Staking::stake: cannot stake 0\\\");\\n        if (stakingEndBlock > 0) {\\n            require(block.number < stakingEndBlock, \\\"Staking:stake: staking completed\\\");\\n        }\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\\n        stakingToken.safeTransferFrom(_msgSender(), address(this), amount);\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staking token.\\n     * @param amount Amount withdraw token.\\n     */\\n    function withdraw(uint256 amount) public nonReentrant updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Staking::withdraw: Cannot withdraw 0\\\");\\n        require(block.number >= unstakingStartBlock, \\\"Staking:withdraw: unstaking not started\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\\n        stakingToken.safeTransfer(_msgSender(), amount);\\n        emit Withdrawn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw reward token.\\n     */\\n    function getReward() public nonReentrant updateReward(_msgSender()) {\\n        uint256 reward = rewards[_msgSender()];\\n        if (reward > 0) {\\n            rewards[_msgSender()] = 0;\\n            rewardsToken.safeTransfer(_msgSender(), reward);\\n            emit RewardPaid(_msgSender(), reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw reward and staking token.\\n     */\\n    function exit() external {\\n        withdraw(_balances[_msgSender()]);\\n        getReward();\\n    }\\n\\n    /**\\n     * @notice Change rewards distribution address.\\n     * @param _rewardDistribution New rewards distribution address.\\n     */\\n    function changeRewardsDistribution(address _rewardDistribution) external onlyOwner {\\n        rewardsDistribution = _rewardDistribution;\\n        emit RewardsDistributionChanged(rewardsDistribution);\\n    }\\n\\n    /**\\n     * @notice Transfer rewards token to recipient if distribution not start.\\n     * @param recipient Recipient.\\n     * @param amount Amount transfered rewards token.\\n     */\\n    function transfer(address recipient, uint256 amount) external onlyOwner {\\n        require(block.number >= periodFinish, \\\"Staking::transfer: distribution not ended\\\");\\n\\n        rewardsToken.safeTransfer(recipient, amount);\\n        emit RewardsTransfered(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Change staking end block number.\\n     * @param _stakingEndBlock New staking end block number.\\n     */\\n    function changeStakingEndBlock(uint256 _stakingEndBlock) external onlyOwner {\\n        stakingEndBlock = _stakingEndBlock;\\n        emit StakingEndBlockChanged(stakingEndBlock);\\n    }\\n\\n    /**\\n     * @notice Change unstaking start block number.\\n     * @param _unstakingStartBlock New unstaking start block number.\\n     */\\n    function changeUnstakingStartBlock(uint256 _unstakingStartBlock) external onlyOwner {\\n        unstakingStartBlock = _unstakingStartBlock;\\n        emit UnstakingStartBlockChanged(unstakingStartBlock);\\n    }\\n\\n    /**\\n     * @notice Start distribution.\\n     * @param reward Distributed rewards amount.\\n     */\\n    function notifyRewardAmount(uint256 reward) external updateReward(address(0)) {\\n        require(_msgSender() == rewardsDistribution || _msgSender() == owner(), \\\"Staking::notifyRewardAmount: caller is not RewardsDistribution or Owner address\\\");\\n\\n        if (block.number >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.number);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(rewardRate <= balance.div(rewardsDuration), \\\"Staking::notifyRewardAmount: provided reward too high\\\");\\n\\n        lastUpdateBlock = block.number;\\n        periodFinish = block.number.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x5c9e3396a58c0a00814613df85c9793fda5bb66d3053849f1cbe8d1907fccb03\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102105760003560e01c806372f702f311610125578063a694fc3a116100ad578063d1af0c7d1161007c578063d1af0c7d14610757578063df136d651461078b578063e9fad8ee146107a9578063ebe2b12b146107b3578063f2fde38b146107d157610210565b8063a694fc3a1461068f578063a9059cbb146106bd578063c1f117901461070b578063cd3daf9d1461073957610210565b80638b876347116100f45780638b876347146105935780638c42285e146105eb5780638da5cb5b146106095780639fd0506d1461063d578063a218141b1461067157610210565b806372f702f3146105195780637b0a47ee1461054d57806380faa57d1461056b5780638456cb591461058957610210565b8063397670c4116101a85780633fc6df6e116101775780633fc6df6e1461041f5780635c975abb14610453578063602e291d1461047357806370a08231146104b7578063715018a61461050f57610210565b8063397670c4146103af5780633c6b16ab146103dd5780633d18b9121461040b5780633f4ba83a1461041557610210565b80631c1f78eb116101e45780631c1f78eb146103015780632cd271e71461031f5780632e1a7d4d14610363578063386a95251461039157610210565b80628cc262146102155780630700037d1461026d5780630a122c8a146102c557806318160ddd146102e3575b600080fd5b6102576004803603602081101561022b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610815565b6040518082815260200191505060405180910390f35b6102af6004803603602081101561028357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610933565b6040518082815260200191505060405180910390f35b6102cd61094b565b6040518082815260200191505060405180910390f35b6102eb610951565b6040518082815260200191505060405180910390f35b61030961095b565b6040518082815260200191505060405180910390f35b6103616004803603602081101561033557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610979565b005b61038f6004803603602081101561037957600080fd5b8101908080359060200190929190505050610af4565b005b610399610e85565b6040518082815260200191505060405180910390f35b6103db600480360360208110156103c557600080fd5b8101908080359060200190929190505050610e8b565b005b610409600480360360208110156103f357600080fd5b8101908080359060200190929190505050610f96565b005b61041361138c565b005b61041d61164c565b005b610427611747565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61045b61176d565b60405180821515815260200191505060405180910390f35b6104b56004803603602081101561048957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611783565b005b6104f9600480360360208110156104cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118fe565b6040518082815260200191505060405180910390f35b610517611947565b005b610521611acd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610555611af3565b6040518082815260200191505060405180910390f35b610573611af9565b6040518082815260200191505060405180910390f35b610591611b0c565b005b6105d5600480360360208110156105a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c07565b6040518082815260200191505060405180910390f35b6105f3611c1f565b6040518082815260200191505060405180910390f35b610611611c25565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610645611c4e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610679611c74565b6040518082815260200191505060405180910390f35b6106bb600480360360208110156106a557600080fd5b8101908080359060200190929190505050611c7a565b005b610709600480360360408110156106d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612052565b005b6107376004803603602081101561072157600080fd5b810190808035906020019092919050505061221b565b005b610741612326565b6040518082815260200191505060405180910390f35b61075f6123b4565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107936123da565b6040518082815260200191505060405180910390f35b6107b16123e0565b005b6107bb612439565b6040518082815260200191505060405180910390f35b610813600480360360208110156107e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061243f565b005b600061092c600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091e670de0b6b3a76400006109106108c2600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108b4612326565b61264a90919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461269490919063ffffffff16565b61271a90919063ffffffff16565b61276490919063ffffffff16565b9050919050565b600e6020528060005260406000206000915090505481565b600b5481565b6000600f54905090565b600061097460085460075461269490919063ffffffff16565b905090565b6109816127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600280541415610b6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550610b7b6127ec565b610b83612326565b600a81905550610b91611af9565b600981905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c5e57610bd481610815565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a54600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211610cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806130de6024913960400191505060405180910390fd5b600c54431015610d12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806131c56027913960400191505060405180910390fd5b610d2782600f5461264a90919063ffffffff16565b600f81905550610d868260106000610d3d6127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461264a90919063ffffffff16565b60106000610d926127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e24610ddb6127ec565b83600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127f49092919063ffffffff16565b610e2c6127ec565b73ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040518082815260200191505060405180910390a250600160028190555050565b60085481565b610e936127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600c819055507f424cb8ca37be7dc06353ecb3bcd4cf84e263f81cfc45721a4fe862acc4b4d588600c546040518082815260200191505060405180910390a150565b6000610fa0612326565b600a81905550610fae611af9565b600981905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461107b57610ff181610815565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a54600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110bc6127ec565b73ffffffffffffffffffffffffffffffffffffffff16148061111757506110e1611c25565b73ffffffffffffffffffffffffffffffffffffffff166110ff6127ec565b73ffffffffffffffffffffffffffffffffffffffff16145b61116c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f815260200180613123604f913960600191505060405180910390fd5b60065443106111955761118a6008548361271a90919063ffffffff16565b6007819055506111f7565b60006111ac4360065461264a90919063ffffffff16565b905060006111c56007548361269490919063ffffffff16565b90506111ee6008546111e0838761276490919063ffffffff16565b61271a90919063ffffffff16565b60078190555050505b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d60208110156112ac57600080fd5b810190808051906020019092919050505090506112d46008548261271a90919063ffffffff16565b600754111561132e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806130646035913960400191505060405180910390fd5b4360098190555061134a6008544361276490919063ffffffff16565b6006819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d836040518082815260200191505060405180910390a1505050565b600280541415611404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b600280819055506114136127ec565b61141b612326565b600a81905550611429611af9565b600981905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114f65761146c81610815565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a54600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600e60006115046127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611640576000600e60006115586127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115ea6115a16127ec565b82600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127f49092919063ffffffff16565b6115f26127ec565b73ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25b50506001600281905550565b6116546127ec565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806116e857506116b26127ec565b73ffffffffffffffffffffffffffffffffffffffff166116d0611c25565b73ffffffffffffffffffffffffffffffffffffffff16145b61173d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806130996045913960600191505060405180910390fd5b611745612896565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060149054906101000a900460ff16905090565b61178b6127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f995929e3bdfa9f1b0b527c02b5b513a7c476ed92f554c52bf7b25e51cfee029f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61194f6127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b6000611b0743600654612988565b905090565b611b146127ec565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611ba85750611b726127ec565b73ffffffffffffffffffffffffffffffffffffffff16611b90611c25565b73ffffffffffffffffffffffffffffffffffffffff16145b611bfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260418152602001806130236041913960600191505060405180910390fd5b611c056129a1565b565b600d6020528060005260406000206000915090505481565b600c5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600280541415611cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60028081905550611d016127ec565b611d09612326565b600a81905550611d17611af9565b600981905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611de457611d5a81610815565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a54600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211611e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f5374616b696e673a3a7374616b653a2063616e6e6f74207374616b652030000081525060200191505060405180910390fd5b6000600b541115611edd57600b544310611edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5374616b696e673a7374616b653a207374616b696e6720636f6d706c6574656481525060200191505060405180910390fd5b5b611ef282600f5461276490919063ffffffff16565b600f81905550611f518260106000611f086127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461276490919063ffffffff16565b60106000611f5d6127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ff1611fa66127ec565b3084600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612a95909392919063ffffffff16565b611ff96127ec565b73ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040518082815260200191505060405180910390a250600160028190555050565b61205a6127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461211a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600654431015612175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061319c6029913960400191505060405180910390fd5b6121c28282600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127f49092919063ffffffff16565b7fa16d653d791fc52dfde643134b80c696f2e4e26959f6a7628945bf25752425bb8282604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6122236127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146122e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600b819055507f914571955081c100b9e9a7771b41938881220e108fdd97d6e4def0425160f3e7600b546040518082815260200191505060405180910390a150565b600080600f54141561233c57600a5490506123b1565b6123ae61239d600f5461238f670de0b6b3a7640000612381600754612373600954612365611af9565b61264a90919063ffffffff16565b61269490919063ffffffff16565b61269490919063ffffffff16565b61271a90919063ffffffff16565b600a5461276490919063ffffffff16565b90505b90565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b61242f601060006123ef6127ec565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610af4565b61243761138c565b565b60065481565b6124476127ec565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561258d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612ffd6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061268c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b56565b905092915050565b6000808314156126a75760009050612714565b60008284029050828482816126b857fe5b041461270f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806131026021913960400191505060405180910390fd5b809150505b92915050565b600061275c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612c16565b905092915050565b6000808284019050838110156127e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b6128918363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cdc565b505050565b600060149054906101000a900460ff16612918576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61295b6127ec565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008183106129975781612999565b825b905092915050565b600060149054906101000a900460ff1615612a24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a686127ec565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b612b50846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cdc565b50505050565b6000838311158290612c03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612bc8578082015181840152602081019050612bad565b50505050905090810190601f168015612bf55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008083118290612cc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c87578082015181840152602081019050612c6c565b50505050905090810190601f168015612cb45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612cce57fe5b049050809150509392505050565b6060612d3e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612dcb9092919063ffffffff16565b9050600081511115612dc657808060200190516020811015612d5f57600080fd5b8101908080519060200190929190505050612dc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613172602a913960400191505060405180910390fd5b5b505050565b6060612dda8484600085612de3565b90509392505050565b6060612dee85612fe9565b612e60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612eb05780518252602082019150602081019050602083039250612e8d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f12576040519150601f19603f3d011682016040523d82523d6000602084013e612f17565b606091505b50915091508115612f2c578092505050612fe1565b600081511115612f3f5780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fa6578082015181840152602081019050612f8b565b50505050905090810190601f168015612fd35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b600080823b90506000811191505091905056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617573657220616e64206f776e6572206d75737420706175736520636f6e74726163745374616b696e673a3a6e6f74696679526577617264416d6f756e743a2070726f76696465642072657761726420746f6f20686967684f776e61626c655061757361626c653a3a756e70617573653a206f6e6c792070617573657220616e64206f776e6572206d75737420756e706175736520636f6e74726163745374616b696e673a3a77697468647261773a2043616e6e6f742077697468647261772030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775374616b696e673a3a6e6f74696679526577617264416d6f756e743a2063616c6c6572206973206e6f742052657761726473446973747269627574696f6e206f72204f776e657220616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645374616b696e673a3a7472616e736665723a20646973747269627574696f6e206e6f7420656e6465645374616b696e673a77697468647261773a20756e7374616b696e67206e6f742073746172746564a26469706673582212200b77a045fd1b31ed7bb6782a02df66ced227e2668d5c73a9856ad3060149658864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": "Target account."
        },
        "returns": {
          "_0": "Staking token amount."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "changeRewardsDistribution(address)": {
        "params": {
          "_rewardDistribution": "New rewards distribution address."
        }
      },
      "changeStakingEndBlock(uint256)": {
        "params": {
          "_stakingEndBlock": "New staking end block number."
        }
      },
      "changeUnstakingStartBlock(uint256)": {
        "params": {
          "_unstakingStartBlock": "New unstaking start block number."
        }
      },
      "constructor": {
        "params": {
          "_rewardsDistribution": "Rewards distribution address.",
          "_rewardsDuration": "Duration of distribution.",
          "_rewardsToken": "Address of reward token.",
          "_stakingToken": "Address of staking token."
        }
      },
      "earned(address)": {
        "params": {
          "account": "Target account."
        },
        "returns": {
          "_0": "Earned rewards."
        }
      },
      "getRewardForDuration()": {
        "returns": {
          "_0": "Rewards amount for duration."
        }
      },
      "lastTimeRewardApplicable()": {
        "returns": {
          "_0": "Block number of last reward."
        }
      },
      "notifyRewardAmount(uint256)": {
        "params": {
          "reward": "Distributed rewards amount."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "Reward per token."
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount staking token."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "Total staking token amount."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "Amount transfered rewards token.",
          "recipient": "Recipient."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount withdraw token."
        }
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "Staking balances."
      },
      "_totalSupply": {
        "details": "Total staking token amount."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "RewardAdded(uint256)": {
        "notice": "An event thats emitted when an reward token addet to contract."
      },
      "RewardPaid(address,uint256)": {
        "notice": "An event thats emitted when an reward token withdrawal from contract."
      },
      "RewardsDistributionChanged(address)": {
        "notice": "An event thats emitted when an rewards distribution address changed."
      },
      "RewardsTransfered(address,uint256)": {
        "notice": "An event thats emitted when an rewards tokens transfered to recipient."
      },
      "Staked(address,uint256)": {
        "notice": "An event thats emitted when an staking token added to contract."
      },
      "StakingEndBlockChanged(uint256)": {
        "notice": "An event thats emitted when an staking end block number changed."
      },
      "UnstakingStartBlockChanged(uint256)": {
        "notice": "An event thats emitted when an unstaking start block number changed."
      },
      "Withdrawn(address,uint256)": {
        "notice": "An event thats emitted when an staking token withdrawal from contract."
      }
    },
    "kind": "user",
    "methods": {
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "changeRewardsDistribution(address)": {
        "notice": "Change rewards distribution address."
      },
      "changeStakingEndBlock(uint256)": {
        "notice": "Change staking end block number."
      },
      "changeUnstakingStartBlock(uint256)": {
        "notice": "Change unstaking start block number."
      },
      "exit()": {
        "notice": "Withdraw reward and staking token."
      },
      "getReward()": {
        "notice": "Withdraw reward token."
      },
      "lastUpdateBlock()": {
        "notice": "Block number of last update."
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Start distribution."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "periodFinish()": {
        "notice": "Block number of rewards distibution period finish."
      },
      "rewardPerTokenStored()": {
        "notice": "Static reward distribution amount per block."
      },
      "rewardRate()": {
        "notice": "Reward distribution amount per block."
      },
      "rewards(address)": {
        "notice": "Earned rewards."
      },
      "rewardsDistribution()": {
        "notice": "Address of rewards distributor."
      },
      "rewardsDuration()": {
        "notice": "Blocks count in current distribution period."
      },
      "rewardsToken()": {
        "notice": "Rewards token address."
      },
      "stake(uint256)": {
        "notice": "Stake token."
      },
      "stakingEndBlock()": {
        "notice": "Staking completion block number."
      },
      "stakingToken()": {
        "notice": "Staking token address."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer rewards token to recipient if distribution not start."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "unstakingStartBlock()": {
        "notice": "Unstaking start block number."
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "Rewards paid."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staking token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1985,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18352,
        "contract": "contracts/Staking.sol:Staking",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2068,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8204,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8207,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1164"
      },
      {
        "astId": 8210,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1164"
      },
      {
        "astId": 8213,
        "contract": "contracts/Staking.sol:Staking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8216,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8219,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8222,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8225,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8228,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingEndBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8231,
        "contract": "contracts/Staking.sol:Staking",
        "label": "unstakingStartBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8236,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8241,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewards",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8244,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 8249,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_balances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1164": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x9B3396F3c3dD52e99966AC8B55E08d2C615f2d66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBlockLimit",
          "type": "uint256"
        }
      ],
      "name": "BlockLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDepositary",
          "type": "address"
        }
      ],
      "name": "DepositaryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "blockLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockLimit",
          "type": "uint256"
        }
      ],
      "name": "changeBlockLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositary",
          "type": "address"
        }
      ],
      "name": "changeDepositary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bd59078f3667dd9c06fdc3618ad06f2737da364dd1078fe422a604ee48131e8",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x9B3396F3c3dD52e99966AC8B55E08d2C615f2d66",
    "transactionIndex": 9,
    "gasUsed": "748290",
    "logsBloom": "0x
    "blockHash": "0x8703bb11abb0d539d6977532b5bc6b6a0c87ce90a2fbbb9204ebe70264e1c5de",
    "transactionHash": "0x4bd59078f3667dd9c06fdc3618ad06f2737da364dd1078fe422a604ee48131e8",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10912567,
        "transactionHash": "0x4bd59078f3667dd9c06fdc3618ad06f2737da364dd1078fe422a604ee48131e8",
        "address": "0x9B3396F3c3dD52e99966AC8B55E08d2C615f2d66",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x8703bb11abb0d539d6977532b5bc6b6a0c87ce90a2fbbb9204ebe70264e1c5de"
      }
    ],
    "blockNumber": 10912567,
    "cumulativeGasUsed": "1727084",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2bd07d4f462aF6cDcA6223ABc6e7FA4C46d20A3F",
    17280
  ],
  "solcInputHash": "70c372195ba0e618f15d362b71bbc694",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBlockLimit\",\"type\":\"uint256\"}],\"name\":\"BlockLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositary\",\"type\":\"address\"}],\"name\":\"DepositaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockLimit\",\"type\":\"uint256\"}],\"name\":\"changeBlockLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositary\",\"type\":\"address\"}],\"name\":\"changeDepositary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeBlockLimit(uint256)\":{\"params\":{\"_blockLimit\":\"New block limit.\"}},\"changeDepositary(address)\":{\"params\":{\"_depositary\":\"New depositary address.\"}},\"constructor\":{\"params\":{\"_blockLimit\":\"Number of blocks from current.\",\"_depositary\":\"Depositary address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validate()\":{\"returns\":{\"_0\":\"Is state valid.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BlockLimitUpdated(uint256)\":{\"notice\":\"An event thats emitted when block limit updated.\"},\"DepositaryUpdated(address)\":{\"notice\":\"An event thats emitted when depositary address updated.\"}},\"kind\":\"user\",\"methods\":{\"blockLimit()\":{\"notice\":\"Number of blocks from current.\"},\"changeBlockLimit(uint256)\":{\"notice\":\"Update block limit.\"},\"changeDepositary(address)\":{\"notice\":\"Update depositary address.\"},\"depositary()\":{\"notice\":\"Depositary address.\"},\"validate()\":{\"notice\":\"Validate protocol state.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alert/DepositaryUpdateValidator.sol\":\"DepositaryUpdateValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"contracts/alert/DepositaryUpdateValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./IValidator.sol\\\";\\nimport \\\"../depositary/IUpdatable.sol\\\";\\n\\ncontract DepositaryUpdateValidator is IValidator, Ownable {\\n    using SafeMath for uint256;\\n\\n    /// @notice Depositary address.\\n    address public depositary;\\n\\n    /// @notice Number of blocks from current.\\n    uint256 public blockLimit;\\n\\n    /// @notice An event thats emitted when depositary address updated.\\n    event DepositaryUpdated(address newDepositary);\\n\\n    /// @notice An event thats emitted when block limit updated.\\n    event BlockLimitUpdated(uint256 newBlockLimit);\\n\\n    /**\\n     * @param _depositary Depositary address.\\n     * @param _blockLimit Number of blocks from current.\\n     */\\n    constructor(address _depositary, uint256 _blockLimit) public {\\n        depositary = _depositary;\\n        blockLimit = _blockLimit;\\n    }\\n\\n    /**\\n     * @notice Update depositary address.\\n     * @param _depositary New depositary address.\\n     */\\n    function changeDepositary(address _depositary) external onlyOwner {\\n        require(_depositary != address(0), \\\"DepositaryUpdateValidator::changeDepositary: invalid depositary address\\\");\\n\\n        depositary = _depositary;\\n        emit DepositaryUpdated(_depositary);\\n    }\\n\\n    /**\\n     * @notice Update block limit.\\n     * @param _blockLimit New block limit.\\n     */\\n    function changeBlockLimit(uint256 _blockLimit) external onlyOwner {\\n        blockLimit = _blockLimit;\\n        emit BlockLimitUpdated(_blockLimit);\\n    }\\n\\n    function validate() external view override returns (bool) {\\n        uint256 depositaryUpdatedAt = IUpdatable(depositary).lastUpdateBlockNumber();\\n\\n        return depositaryUpdatedAt == 0 || block.number.sub(blockLimit) <= depositaryUpdatedAt;\\n    }\\n}\\n\",\"keccak256\":\"0xb6a2240792f9ff4df626e7f0914fb1210843b93cf2e92b9ceb1623519bd02099\",\"license\":\"MIT\"},\"contracts/alert/IValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IValidator {\\n    /**\\n     * @notice Validate protocol state.\\n     * @return Is state valid.\\n     */\\n    function validate() external view returns(bool);\\n}\\n\",\"keccak256\":\"0x7e8e6aff23785d14f0a64f49fbe2c5d42c599b40dca2efa5d4f8a47cafbff690\",\"license\":\"MIT\"},\"contracts/depositary/IUpdatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUpdatable {\\n    /**\\n     * @return Last update block number.\\n     */\\n    function lastUpdateBlockNumber() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8bfd9344ed4b2dce2aa1655f24808b0e58151d194cce24c3ac6d184441c78fce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ca9380380610ca98339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050600061005e61014b60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050610153565b600033905090565b610b47806101626000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063f2fde38b1461014d578063f3bcd23714610191578063f4b70ce6146101af57610088565b80630e0603781461008d57806352a8e511146100c15780636901f668146100ef578063715018a61461010f575b600080fd5b6100956101f3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100ed600480360360208110156100d757600080fd5b8101908080359060200190929190505050610219565b005b6100f7610322565b60405180821515815260200191505060405180910390f35b6101176103f3565b005b610121610579565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61018f6004803603602081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105a2565b005b6101996107ad565b6040518082815260200191505060405180910390f35b6101f1600480360360208110156101c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b3565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610221610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806002819055507fd7e8afc247f5a0763625b380d7ca8b4570b4adffce85069a39d2693c28672d96816040518082815260200191505060405180910390a150565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4c6e4166040518163ffffffff1660e01b815260040160206040518083038186803b15801561038d57600080fd5b505afa1580156103a1573d6000803e3d6000fd5b505050506040513d60208110156103b757600080fd5b8101908080519060200190929190505050905060008114806103ed5750806103ea6002544361099a90919063ffffffff16565b11155b91505090565b6103fb610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105aa610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461066a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610aa56026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6107bb610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461087b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610901576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526047815260200180610acb6047913960600191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffc2dd6255446ae34f237bfdf2cd1822decaf4bc582bbeaa93eb09ef0d5f3e72081604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600033905090565b60006109dc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506109e4565b905092915050565b6000838311158290610a91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a56578082015181840152602081019050610a3b565b50505050905090810190601f168015610a835780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734465706f73697461727955706461746556616c696461746f723a3a6368616e67654465706f7369746172793a20696e76616c6964206465706f7369746172792061646472657373a2646970667358221220dcfd34418e3448c30c09df07b4236068d8669fd2d816ebc389eede8546b9a51b64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063f2fde38b1461014d578063f3bcd23714610191578063f4b70ce6146101af57610088565b80630e0603781461008d57806352a8e511146100c15780636901f668146100ef578063715018a61461010f575b600080fd5b6100956101f3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100ed600480360360208110156100d757600080fd5b8101908080359060200190929190505050610219565b005b6100f7610322565b60405180821515815260200191505060405180910390f35b6101176103f3565b005b610121610579565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61018f6004803603602081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105a2565b005b6101996107ad565b6040518082815260200191505060405180910390f35b6101f1600480360360208110156101c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b3565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610221610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806002819055507fd7e8afc247f5a0763625b380d7ca8b4570b4adffce85069a39d2693c28672d96816040518082815260200191505060405180910390a150565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4c6e4166040518163ffffffff1660e01b815260040160206040518083038186803b15801561038d57600080fd5b505afa1580156103a1573d6000803e3d6000fd5b505050506040513d60208110156103b757600080fd5b8101908080519060200190929190505050905060008114806103ed5750806103ea6002544361099a90919063ffffffff16565b11155b91505090565b6103fb610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105aa610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461066a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610aa56026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6107bb610992565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461087b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610901576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526047815260200180610acb6047913960600191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffc2dd6255446ae34f237bfdf2cd1822decaf4bc582bbeaa93eb09ef0d5f3e72081604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600033905090565b60006109dc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506109e4565b905092915050565b6000838311158290610a91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a56578082015181840152602081019050610a3b565b50505050905090810190601f168015610a835780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734465706f73697461727955706461746556616c696461746f723a3a6368616e67654465706f7369746172793a20696e76616c6964206465706f7369746172792061646472657373a2646970667358221220dcfd34418e3448c30c09df07b4236068d8669fd2d816ebc389eede8546b9a51b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeBlockLimit(uint256)": {
        "params": {
          "_blockLimit": "New block limit."
        }
      },
      "changeDepositary(address)": {
        "params": {
          "_depositary": "New depositary address."
        }
      },
      "constructor": {
        "params": {
          "_blockLimit": "Number of blocks from current.",
          "_depositary": "Depositary address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validate()": {
        "returns": {
          "_0": "Is state valid."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BlockLimitUpdated(uint256)": {
        "notice": "An event thats emitted when block limit updated."
      },
      "DepositaryUpdated(address)": {
        "notice": "An event thats emitted when depositary address updated."
      }
    },
    "kind": "user",
    "methods": {
      "blockLimit()": {
        "notice": "Number of blocks from current."
      },
      "changeBlockLimit(uint256)": {
        "notice": "Update block limit."
      },
      "changeDepositary(address)": {
        "notice": "Update depositary address."
      },
      "depositary()": {
        "notice": "Depositary address."
      },
      "validate()": {
        "notice": "Validate protocol state."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/alert/DepositaryUpdateValidator.sol:DepositaryUpdateValidator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11181,
        "contract": "contracts/alert/DepositaryUpdateValidator.sol:DepositaryUpdateValidator",
        "label": "depositary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11184,
        "contract": "contracts/alert/DepositaryUpdateValidator.sol:DepositaryUpdateValidator",
        "label": "blockLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}